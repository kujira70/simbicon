# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Core', [dirname(__file__)])
        except ImportError:
            import _Core
            return _Core
        if fp is not None:
            try:
                _mod = imp.load_module('_Core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Core = swig_import_helper()
    del swig_import_helper
else:
    import _Core
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import Utils
import Physics
import MathLib

_Core.LEFT_STANCE_swigconstant(_Core)
LEFT_STANCE = _Core.LEFT_STANCE

_Core.RIGHT_STANCE_swigconstant(_Core)
RIGHT_STANCE = _Core.RIGHT_STANCE
class SimGlobals(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimGlobals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimGlobals, name)
    __repr__ = _swig_repr
    __swig_setmethods__["forceHeadingControl"] = _Core.SimGlobals_forceHeadingControl_set
    __swig_getmethods__["forceHeadingControl"] = _Core.SimGlobals_forceHeadingControl_get
    if _newclass:
        forceHeadingControl = _swig_property(_Core.SimGlobals_forceHeadingControl_get, _Core.SimGlobals_forceHeadingControl_set)
    __swig_setmethods__["desiredHeading"] = _Core.SimGlobals_desiredHeading_set
    __swig_getmethods__["desiredHeading"] = _Core.SimGlobals_desiredHeading_get
    if _newclass:
        desiredHeading = _swig_property(_Core.SimGlobals_desiredHeading_get, _Core.SimGlobals_desiredHeading_set)
    __swig_setmethods__["dt"] = _Core.SimGlobals_dt_set
    __swig_getmethods__["dt"] = _Core.SimGlobals_dt_get
    if _newclass:
        dt = _swig_property(_Core.SimGlobals_dt_get, _Core.SimGlobals_dt_set)
    __swig_setmethods__["activeRbEngine"] = _Core.SimGlobals_activeRbEngine_set
    __swig_getmethods__["activeRbEngine"] = _Core.SimGlobals_activeRbEngine_get
    if _newclass:
        activeRbEngine = _swig_property(_Core.SimGlobals_activeRbEngine_get, _Core.SimGlobals_activeRbEngine_set)
    __swig_setmethods__["targetPos"] = _Core.SimGlobals_targetPos_set
    __swig_getmethods__["targetPos"] = _Core.SimGlobals_targetPos_get
    if _newclass:
        targetPos = _swig_property(_Core.SimGlobals_targetPos_get, _Core.SimGlobals_targetPos_set)
    __swig_setmethods__["targetPosX"] = _Core.SimGlobals_targetPosX_set
    __swig_getmethods__["targetPosX"] = _Core.SimGlobals_targetPosX_get
    if _newclass:
        targetPosX = _swig_property(_Core.SimGlobals_targetPosX_get, _Core.SimGlobals_targetPosX_set)
    __swig_setmethods__["targetPosZ"] = _Core.SimGlobals_targetPosZ_set
    __swig_getmethods__["targetPosZ"] = _Core.SimGlobals_targetPosZ_get
    if _newclass:
        targetPosZ = _swig_property(_Core.SimGlobals_targetPosZ_get, _Core.SimGlobals_targetPosZ_set)
    __swig_setmethods__["conInterpolationValue"] = _Core.SimGlobals_conInterpolationValue_set
    __swig_getmethods__["conInterpolationValue"] = _Core.SimGlobals_conInterpolationValue_get
    if _newclass:
        conInterpolationValue = _swig_property(_Core.SimGlobals_conInterpolationValue_get, _Core.SimGlobals_conInterpolationValue_set)
    __swig_setmethods__["bipDesiredVelocity"] = _Core.SimGlobals_bipDesiredVelocity_set
    __swig_getmethods__["bipDesiredVelocity"] = _Core.SimGlobals_bipDesiredVelocity_get
    if _newclass:
        bipDesiredVelocity = _swig_property(_Core.SimGlobals_bipDesiredVelocity_get, _Core.SimGlobals_bipDesiredVelocity_set)
    __swig_setmethods__["constraintSoftness"] = _Core.SimGlobals_constraintSoftness_set
    __swig_getmethods__["constraintSoftness"] = _Core.SimGlobals_constraintSoftness_get
    if _newclass:
        constraintSoftness = _swig_property(_Core.SimGlobals_constraintSoftness_get, _Core.SimGlobals_constraintSoftness_set)
    __swig_setmethods__["CGIterCount"] = _Core.SimGlobals_CGIterCount_set
    __swig_getmethods__["CGIterCount"] = _Core.SimGlobals_CGIterCount_get
    if _newclass:
        CGIterCount = _swig_property(_Core.SimGlobals_CGIterCount_get, _Core.SimGlobals_CGIterCount_set)
    __swig_setmethods__["linearizationCount"] = _Core.SimGlobals_linearizationCount_set
    __swig_getmethods__["linearizationCount"] = _Core.SimGlobals_linearizationCount_get
    if _newclass:
        linearizationCount = _swig_property(_Core.SimGlobals_linearizationCount_get, _Core.SimGlobals_linearizationCount_set)
    __swig_setmethods__["rootSagittal"] = _Core.SimGlobals_rootSagittal_set
    __swig_getmethods__["rootSagittal"] = _Core.SimGlobals_rootSagittal_get
    if _newclass:
        rootSagittal = _swig_property(_Core.SimGlobals_rootSagittal_get, _Core.SimGlobals_rootSagittal_set)
    __swig_setmethods__["stanceKnee"] = _Core.SimGlobals_stanceKnee_set
    __swig_getmethods__["stanceKnee"] = _Core.SimGlobals_stanceKnee_get
    if _newclass:
        stanceKnee = _swig_property(_Core.SimGlobals_stanceKnee_get, _Core.SimGlobals_stanceKnee_set)

    def __init__(self):
        this = _Core.new_SimGlobals()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_SimGlobals
    __del__ = lambda self: None
    __swig_getmethods__["getRBEngine"] = lambda x: _Core.SimGlobals_getRBEngine
    if _newclass:
        getRBEngine = staticmethod(_Core.SimGlobals_getRBEngine)
SimGlobals_swigregister = _Core.SimGlobals_swigregister
SimGlobals_swigregister(SimGlobals)
cvar = _Core.cvar

def SimGlobals_getRBEngine():
    return _Core.SimGlobals_getRBEngine()
SimGlobals_getRBEngine = _Core.SimGlobals_getRBEngine

class ReducedCharacterStateArray(Utils.DynamicArrayDouble):
    __swig_setmethods__ = {}
    for _s in [Utils.DynamicArrayDouble]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReducedCharacterStateArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.DynamicArrayDouble]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReducedCharacterStateArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Core.new_ReducedCharacterStateArray()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_ReducedCharacterStateArray
    __del__ = lambda self: None
ReducedCharacterStateArray_swigregister = _Core.ReducedCharacterStateArray_swigregister
ReducedCharacterStateArray_swigregister(ReducedCharacterStateArray)

class Character(Physics.ArticulatedFigure):
    __swig_setmethods__ = {}
    for _s in [Physics.ArticulatedFigure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Character, name, value)
    __swig_getmethods__ = {}
    for _s in [Physics.ArticulatedFigure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Character, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Core.new_Character()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_Character
    __del__ = lambda self: None

    def getRelativeOrientation(self, i, qRel):
        return _Core.Character_getRelativeOrientation(self, i, qRel)

    def getRelativeAngularVelocity(self, i, wRel):
        return _Core.Character_getRelativeAngularVelocity(self, i, wRel)

    def readReducedStateFromFile(self, fName, state):
        return _Core.Character_readReducedStateFromFile(self, fName, state)

    def loadReducedStateFromFile(self, fName):
        return _Core.Character_loadReducedStateFromFile(self, fName)

    def saveReducedStateToFile(self, *args):
        return _Core.Character_saveReducedStateToFile(self, *args)

    def getState(self, state):
        return _Core.Character_getState(self, state)

    def setState(self, state, start=0, hackFlag=True):
        return _Core.Character_setState(self, state, start, hackFlag)

    def getStateDimension(self):
        return _Core.Character_getStateDimension(self)

    def getHeading(self):
        return _Core.Character_getHeading(self)

    def getHeadingAngle(self):
        return _Core.Character_getHeadingAngle(self)

    def recenter(self):
        return _Core.Character_recenter(self)

    def setHeading(self, *args):
        return _Core.Character_setHeading(self, *args)

    def reverseStanceOfStateArray(self, state, start=0):
        return _Core.Character_reverseStanceOfStateArray(self, state, start)

    def getReverseStanceState(self, state):
        return _Core.Character_getReverseStanceState(self, state)

    def getCOM(self):
        return _Core.Character_getCOM(self)

    def getCOMVelocity(self):
        return _Core.Character_getCOMVelocity(self)
Character_swigregister = _Core.Character_swigregister
Character_swigregister(Character)


def computeHeading(rot):
    return _Core.computeHeading(rot)
computeHeading = _Core.computeHeading
class RelevantJoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelevantJoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelevantJoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jIndex"] = _Core.RelevantJoint_jIndex_set
    __swig_getmethods__["jIndex"] = _Core.RelevantJoint_jIndex_get
    if _newclass:
        jIndex = _swig_property(_Core.RelevantJoint_jIndex_get, _Core.RelevantJoint_jIndex_set)
    __swig_setmethods__["wQ"] = _Core.RelevantJoint_wQ_set
    __swig_getmethods__["wQ"] = _Core.RelevantJoint_wQ_get
    if _newclass:
        wQ = _swig_property(_Core.RelevantJoint_wQ_get, _Core.RelevantJoint_wQ_set)
    __swig_setmethods__["wV"] = _Core.RelevantJoint_wV_set
    __swig_getmethods__["wV"] = _Core.RelevantJoint_wV_get
    if _newclass:
        wV = _swig_property(_Core.RelevantJoint_wV_get, _Core.RelevantJoint_wV_set)

    def __init__(self):
        this = _Core.new_RelevantJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_RelevantJoint
    __del__ = lambda self: None
RelevantJoint_swigregister = _Core.RelevantJoint_swigregister
RelevantJoint_swigregister(RelevantJoint)

class ReducedCharacterState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReducedCharacterState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReducedCharacterState, name)
    __repr__ = _swig_repr

    def __init__(self, s, index=0):
        this = _Core.new_ReducedCharacterState(s, index)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_ReducedCharacterState
    __del__ = lambda self: None

    def getPosition(self):
        return _Core.ReducedCharacterState_getPosition(self)

    def setPosition(self, p):
        return _Core.ReducedCharacterState_setPosition(self, p)

    def getOrientation(self):
        return _Core.ReducedCharacterState_getOrientation(self)

    def setOrientation(self, q):
        return _Core.ReducedCharacterState_setOrientation(self, q)

    def getVelocity(self):
        return _Core.ReducedCharacterState_getVelocity(self)

    def setVelocity(self, v):
        return _Core.ReducedCharacterState_setVelocity(self, v)

    def getAngularVelocity(self):
        return _Core.ReducedCharacterState_getAngularVelocity(self)

    def setAngularVelocity(self, v):
        return _Core.ReducedCharacterState_setAngularVelocity(self, v)

    def getJointRelativeOrientation(self, jIndex):
        return _Core.ReducedCharacterState_getJointRelativeOrientation(self, jIndex)

    def setJointRelativeOrientation(self, q, jIndex):
        return _Core.ReducedCharacterState_setJointRelativeOrientation(self, q, jIndex)

    def getJointRelativeAngVelocity(self, jIndex):
        return _Core.ReducedCharacterState_getJointRelativeAngVelocity(self, jIndex)

    def setJointRelativeAngVelocity(self, w, jIndex):
        return _Core.ReducedCharacterState_setJointRelativeAngVelocity(self, w, jIndex)

    def raptor_computeDistanceTo(self, other):
        return _Core.ReducedCharacterState_raptor_computeDistanceTo(self, other)

    def bigBird3d_computeDistanceTo(self, other):
        return _Core.ReducedCharacterState_bigBird3d_computeDistanceTo(self, other)

    def bip3dv2_computeDistanceTo(self, other):
        return _Core.ReducedCharacterState_bip3dv2_computeDistanceTo(self, other)
ReducedCharacterState_swigregister = _Core.ReducedCharacterState_swigregister
ReducedCharacterState_swigregister(ReducedCharacterState)

class BalanceFeedback(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BalanceFeedback, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BalanceFeedback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_BalanceFeedback
    __del__ = lambda self: None

    def getFeedbackContribution(self, con, j, phi, d, v):
        return _Core.BalanceFeedback_getFeedbackContribution(self, con, j, phi, d, v)

    def writeToFile(self, fp):
        return _Core.BalanceFeedback_writeToFile(self, fp)

    def loadFromFile(self, fp):
        return _Core.BalanceFeedback_loadFromFile(self, fp)
BalanceFeedback_swigregister = _Core.BalanceFeedback_swigregister
BalanceFeedback_swigregister(BalanceFeedback)

class LinearBalanceFeedback(BalanceFeedback):
    __swig_setmethods__ = {}
    for _s in [BalanceFeedback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearBalanceFeedback, name, value)
    __swig_getmethods__ = {}
    for _s in [BalanceFeedback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearBalanceFeedback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["feedbackProjectionAxis"] = _Core.LinearBalanceFeedback_feedbackProjectionAxis_set
    __swig_getmethods__["feedbackProjectionAxis"] = _Core.LinearBalanceFeedback_feedbackProjectionAxis_get
    if _newclass:
        feedbackProjectionAxis = _swig_property(_Core.LinearBalanceFeedback_feedbackProjectionAxis_get, _Core.LinearBalanceFeedback_feedbackProjectionAxis_set)
    __swig_setmethods__["cd"] = _Core.LinearBalanceFeedback_cd_set
    __swig_getmethods__["cd"] = _Core.LinearBalanceFeedback_cd_get
    if _newclass:
        cd = _swig_property(_Core.LinearBalanceFeedback_cd_get, _Core.LinearBalanceFeedback_cd_set)
    __swig_setmethods__["cv"] = _Core.LinearBalanceFeedback_cv_set
    __swig_getmethods__["cv"] = _Core.LinearBalanceFeedback_cv_get
    if _newclass:
        cv = _swig_property(_Core.LinearBalanceFeedback_cv_get, _Core.LinearBalanceFeedback_cv_set)
    __swig_setmethods__["vMin"] = _Core.LinearBalanceFeedback_vMin_set
    __swig_getmethods__["vMin"] = _Core.LinearBalanceFeedback_vMin_get
    if _newclass:
        vMin = _swig_property(_Core.LinearBalanceFeedback_vMin_get, _Core.LinearBalanceFeedback_vMin_set)
    __swig_setmethods__["vMax"] = _Core.LinearBalanceFeedback_vMax_set
    __swig_getmethods__["vMax"] = _Core.LinearBalanceFeedback_vMax_get
    if _newclass:
        vMax = _swig_property(_Core.LinearBalanceFeedback_vMax_get, _Core.LinearBalanceFeedback_vMax_set)
    __swig_setmethods__["dMin"] = _Core.LinearBalanceFeedback_dMin_set
    __swig_getmethods__["dMin"] = _Core.LinearBalanceFeedback_dMin_get
    if _newclass:
        dMin = _swig_property(_Core.LinearBalanceFeedback_dMin_get, _Core.LinearBalanceFeedback_dMin_set)
    __swig_setmethods__["dMax"] = _Core.LinearBalanceFeedback_dMax_set
    __swig_getmethods__["dMax"] = _Core.LinearBalanceFeedback_dMax_get
    if _newclass:
        dMax = _swig_property(_Core.LinearBalanceFeedback_dMax_get, _Core.LinearBalanceFeedback_dMax_set)

    def __init__(self):
        this = _Core.new_LinearBalanceFeedback()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_LinearBalanceFeedback
    __del__ = lambda self: None

    def setProjectionAxis(self, axis):
        return _Core.LinearBalanceFeedback_setProjectionAxis(self, axis)

    def getProjectionAxis(self):
        return _Core.LinearBalanceFeedback_getProjectionAxis(self)

    def setCd(self, cd):
        return _Core.LinearBalanceFeedback_setCd(self, cd)

    def getCd(self):
        return _Core.LinearBalanceFeedback_getCd(self)

    def setCv(self, cv):
        return _Core.LinearBalanceFeedback_setCv(self, cv)

    def getCv(self):
        return _Core.LinearBalanceFeedback_getCv(self)

    def setDLimits(self, dMin, dMax):
        return _Core.LinearBalanceFeedback_setDLimits(self, dMin, dMax)

    def getDMin(self):
        return _Core.LinearBalanceFeedback_getDMin(self)

    def getDMax(self):
        return _Core.LinearBalanceFeedback_getDMax(self)

    def setVLimits(self, vMin, vMax):
        return _Core.LinearBalanceFeedback_setVLimits(self, vMin, vMax)

    def getVMin(self):
        return _Core.LinearBalanceFeedback_getVMin(self)

    def getVMax(self):
        return _Core.LinearBalanceFeedback_getVMax(self)

    def getFeedbackContribution(self, con, j, phi, d, v):
        return _Core.LinearBalanceFeedback_getFeedbackContribution(self, con, j, phi, d, v)

    def writeToFile(self, fp):
        return _Core.LinearBalanceFeedback_writeToFile(self, fp)

    def loadFromFile(self, fp):
        return _Core.LinearBalanceFeedback_loadFromFile(self, fp)
LinearBalanceFeedback_swigregister = _Core.LinearBalanceFeedback_swigregister
LinearBalanceFeedback_swigregister(LinearBalanceFeedback)

class DoubleStanceFeedback(BalanceFeedback):
    __swig_setmethods__ = {}
    for _s in [BalanceFeedback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleStanceFeedback, name, value)
    __swig_getmethods__ = {}
    for _s in [BalanceFeedback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleStanceFeedback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["feedbackProjectionAxis"] = _Core.DoubleStanceFeedback_feedbackProjectionAxis_set
    __swig_getmethods__["feedbackProjectionAxis"] = _Core.DoubleStanceFeedback_feedbackProjectionAxis_get
    if _newclass:
        feedbackProjectionAxis = _swig_property(_Core.DoubleStanceFeedback_feedbackProjectionAxis_get, _Core.DoubleStanceFeedback_feedbackProjectionAxis_set)
    __swig_setmethods__["maxFeedbackValue"] = _Core.DoubleStanceFeedback_maxFeedbackValue_set
    __swig_getmethods__["maxFeedbackValue"] = _Core.DoubleStanceFeedback_maxFeedbackValue_get
    if _newclass:
        maxFeedbackValue = _swig_property(_Core.DoubleStanceFeedback_maxFeedbackValue_get, _Core.DoubleStanceFeedback_maxFeedbackValue_set)
    __swig_setmethods__["minFeedbackValue"] = _Core.DoubleStanceFeedback_minFeedbackValue_set
    __swig_getmethods__["minFeedbackValue"] = _Core.DoubleStanceFeedback_minFeedbackValue_get
    if _newclass:
        minFeedbackValue = _swig_property(_Core.DoubleStanceFeedback_minFeedbackValue_get, _Core.DoubleStanceFeedback_minFeedbackValue_set)
    __swig_setmethods__["cd"] = _Core.DoubleStanceFeedback_cd_set
    __swig_getmethods__["cd"] = _Core.DoubleStanceFeedback_cd_get
    if _newclass:
        cd = _swig_property(_Core.DoubleStanceFeedback_cd_get, _Core.DoubleStanceFeedback_cd_set)
    __swig_setmethods__["cv"] = _Core.DoubleStanceFeedback_cv_set
    __swig_getmethods__["cv"] = _Core.DoubleStanceFeedback_cv_get
    if _newclass:
        cv = _swig_property(_Core.DoubleStanceFeedback_cv_get, _Core.DoubleStanceFeedback_cv_set)
    __swig_setmethods__["totalMultiplier"] = _Core.DoubleStanceFeedback_totalMultiplier_set
    __swig_getmethods__["totalMultiplier"] = _Core.DoubleStanceFeedback_totalMultiplier_get
    if _newclass:
        totalMultiplier = _swig_property(_Core.DoubleStanceFeedback_totalMultiplier_get, _Core.DoubleStanceFeedback_totalMultiplier_set)
    __swig_setmethods__["vMin"] = _Core.DoubleStanceFeedback_vMin_set
    __swig_getmethods__["vMin"] = _Core.DoubleStanceFeedback_vMin_get
    if _newclass:
        vMin = _swig_property(_Core.DoubleStanceFeedback_vMin_get, _Core.DoubleStanceFeedback_vMin_set)
    __swig_setmethods__["vMax"] = _Core.DoubleStanceFeedback_vMax_set
    __swig_getmethods__["vMax"] = _Core.DoubleStanceFeedback_vMax_get
    if _newclass:
        vMax = _swig_property(_Core.DoubleStanceFeedback_vMax_get, _Core.DoubleStanceFeedback_vMax_set)
    __swig_setmethods__["dMin"] = _Core.DoubleStanceFeedback_dMin_set
    __swig_getmethods__["dMin"] = _Core.DoubleStanceFeedback_dMin_get
    if _newclass:
        dMin = _swig_property(_Core.DoubleStanceFeedback_dMin_get, _Core.DoubleStanceFeedback_dMin_set)
    __swig_setmethods__["dMax"] = _Core.DoubleStanceFeedback_dMax_set
    __swig_getmethods__["dMax"] = _Core.DoubleStanceFeedback_dMax_get
    if _newclass:
        dMax = _swig_property(_Core.DoubleStanceFeedback_dMax_get, _Core.DoubleStanceFeedback_dMax_set)

    def __init__(self):
        this = _Core.new_DoubleStanceFeedback()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_DoubleStanceFeedback
    __del__ = lambda self: None

    def getFeedbackContribution(self, con, j, phi, d, v):
        return _Core.DoubleStanceFeedback_getFeedbackContribution(self, con, j, phi, d, v)

    def writeToFile(self, fp):
        return _Core.DoubleStanceFeedback_writeToFile(self, fp)

    def loadFromFile(self, fp):
        return _Core.DoubleStanceFeedback_loadFromFile(self, fp)
DoubleStanceFeedback_swigregister = _Core.DoubleStanceFeedback_swigregister
DoubleStanceFeedback_swigregister(DoubleStanceFeedback)

class TrajectoryComponent(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectoryComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectoryComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["baseTraj"] = _Core.TrajectoryComponent_baseTraj_set
    __swig_getmethods__["baseTraj"] = _Core.TrajectoryComponent_baseTraj_get
    if _newclass:
        baseTraj = _swig_property(_Core.TrajectoryComponent_baseTraj_get, _Core.TrajectoryComponent_baseTraj_set)
    __swig_setmethods__["dTrajScale"] = _Core.TrajectoryComponent_dTrajScale_set
    __swig_getmethods__["dTrajScale"] = _Core.TrajectoryComponent_dTrajScale_get
    if _newclass:
        dTrajScale = _swig_property(_Core.TrajectoryComponent_dTrajScale_get, _Core.TrajectoryComponent_dTrajScale_set)
    __swig_setmethods__["vTrajScale"] = _Core.TrajectoryComponent_vTrajScale_set
    __swig_getmethods__["vTrajScale"] = _Core.TrajectoryComponent_vTrajScale_get
    if _newclass:
        vTrajScale = _swig_property(_Core.TrajectoryComponent_vTrajScale_get, _Core.TrajectoryComponent_vTrajScale_set)
    __swig_setmethods__["reverseAngleOnLeftStance"] = _Core.TrajectoryComponent_reverseAngleOnLeftStance_set
    __swig_getmethods__["reverseAngleOnLeftStance"] = _Core.TrajectoryComponent_reverseAngleOnLeftStance_get
    if _newclass:
        reverseAngleOnLeftStance = _swig_property(_Core.TrajectoryComponent_reverseAngleOnLeftStance_get, _Core.TrajectoryComponent_reverseAngleOnLeftStance_set)
    __swig_setmethods__["reverseAngleOnRightStance"] = _Core.TrajectoryComponent_reverseAngleOnRightStance_set
    __swig_getmethods__["reverseAngleOnRightStance"] = _Core.TrajectoryComponent_reverseAngleOnRightStance_get
    if _newclass:
        reverseAngleOnRightStance = _swig_property(_Core.TrajectoryComponent_reverseAngleOnRightStance_get, _Core.TrajectoryComponent_reverseAngleOnRightStance_set)
    __swig_setmethods__["rotationAxis"] = _Core.TrajectoryComponent_rotationAxis_set
    __swig_getmethods__["rotationAxis"] = _Core.TrajectoryComponent_rotationAxis_get
    if _newclass:
        rotationAxis = _swig_property(_Core.TrajectoryComponent_rotationAxis_get, _Core.TrajectoryComponent_rotationAxis_set)
    __swig_setmethods__["bFeedback"] = _Core.TrajectoryComponent_bFeedback_set
    __swig_getmethods__["bFeedback"] = _Core.TrajectoryComponent_bFeedback_get
    if _newclass:
        bFeedback = _swig_property(_Core.TrajectoryComponent_bFeedback_get, _Core.TrajectoryComponent_bFeedback_set)
    __swig_setmethods__["offset"] = _Core.TrajectoryComponent_offset_set
    __swig_getmethods__["offset"] = _Core.TrajectoryComponent_offset_get
    if _newclass:
        offset = _swig_property(_Core.TrajectoryComponent_offset_get, _Core.TrajectoryComponent_offset_set)
    ROS_LEFT = _Core.TrajectoryComponent_ROS_LEFT
    ROS_RIGHT = _Core.TrajectoryComponent_ROS_RIGHT
    ROS_DONT_REVERSE = _Core.TrajectoryComponent_ROS_DONT_REVERSE

    def __init__(self):
        this = _Core.new_TrajectoryComponent()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_TrajectoryComponent
    __del__ = lambda self: None

    def setRotationAxis(self, axis):
        return _Core.TrajectoryComponent_setRotationAxis(self, axis)

    def getRotationAxis(self):
        return _Core.TrajectoryComponent_getRotationAxis(self)

    def setReverseOnStance(self, stance):
        return _Core.TrajectoryComponent_setReverseOnStance(self, stance)

    def getReverseOnStance(self):
        return _Core.TrajectoryComponent_getReverseOnStance(self)

    def setFeedback(self, feedback_disown):
        return _Core.TrajectoryComponent_setFeedback(self, feedback_disown)

    def getFeedback(self):
        return _Core.TrajectoryComponent_getFeedback(self)

    def setBaseTrajectory(self, traj):
        return _Core.TrajectoryComponent_setBaseTrajectory(self, traj)

    def getBaseTrajectory(self):
        return _Core.TrajectoryComponent_getBaseTrajectory(self)

    def setVTrajScale(self, traj):
        return _Core.TrajectoryComponent_setVTrajScale(self, traj)

    def getVTrajScale(self):
        return _Core.TrajectoryComponent_getVTrajScale(self)

    def setDTrajScale(self, traj):
        return _Core.TrajectoryComponent_setDTrajScale(self, traj)

    def getDTrajScale(self):
        return _Core.TrajectoryComponent_getDTrajScale(self)

    def evaluateTrajectoryComponent(self, con, j, stance, phi, d, v, bareTrajectory=False):
        return _Core.TrajectoryComponent_evaluateTrajectoryComponent(self, con, j, stance, phi, d, v, bareTrajectory)

    def computeFeedback(self, con, j, phi, d, v):
        return _Core.TrajectoryComponent_computeFeedback(self, con, j, phi, d, v)

    def updateComponent(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, oldDTrajX, oldDTrajZ, oldVTrajX, oldVTrajZ, nbSamples):
        return _Core.TrajectoryComponent_updateComponent(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, oldDTrajX, oldDTrajZ, oldVTrajX, oldVTrajZ, nbSamples)

    def readTrajectoryComponent(self, f):
        return _Core.TrajectoryComponent_readTrajectoryComponent(self, f)

    def writeBaseTrajectory(self, f):
        return _Core.TrajectoryComponent_writeBaseTrajectory(self, f)

    def writeScaleTraj(self, f, scaleTraj, type):
        return _Core.TrajectoryComponent_writeScaleTraj(self, f, scaleTraj, type)

    def writeTrajectoryComponent(self, f):
        return _Core.TrajectoryComponent_writeTrajectoryComponent(self, f)
TrajectoryComponent_swigregister = _Core.TrajectoryComponent_swigregister
TrajectoryComponent_swigregister(TrajectoryComponent)

class ExternalForce(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalForce, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalForce, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leftStanceARB"] = _Core.ExternalForce_leftStanceARB_set
    __swig_getmethods__["leftStanceARB"] = _Core.ExternalForce_leftStanceARB_get
    if _newclass:
        leftStanceARB = _swig_property(_Core.ExternalForce_leftStanceARB_get, _Core.ExternalForce_leftStanceARB_set)
    __swig_setmethods__["rightStanceARB"] = _Core.ExternalForce_rightStanceARB_set
    __swig_getmethods__["rightStanceARB"] = _Core.ExternalForce_rightStanceARB_get
    if _newclass:
        rightStanceARB = _swig_property(_Core.ExternalForce_rightStanceARB_get, _Core.ExternalForce_rightStanceARB_set)
    __swig_setmethods__["bName"] = _Core.ExternalForce_bName_set
    __swig_getmethods__["bName"] = _Core.ExternalForce_bName_get
    if _newclass:
        bName = _swig_property(_Core.ExternalForce_bName_get, _Core.ExternalForce_bName_set)
    __swig_setmethods__["forceX"] = _Core.ExternalForce_forceX_set
    __swig_getmethods__["forceX"] = _Core.ExternalForce_forceX_get
    if _newclass:
        forceX = _swig_property(_Core.ExternalForce_forceX_get, _Core.ExternalForce_forceX_set)
    __swig_setmethods__["forceY"] = _Core.ExternalForce_forceY_set
    __swig_getmethods__["forceY"] = _Core.ExternalForce_forceY_get
    if _newclass:
        forceY = _swig_property(_Core.ExternalForce_forceY_get, _Core.ExternalForce_forceY_set)
    __swig_setmethods__["forceZ"] = _Core.ExternalForce_forceZ_set
    __swig_getmethods__["forceZ"] = _Core.ExternalForce_forceZ_get
    if _newclass:
        forceZ = _swig_property(_Core.ExternalForce_forceZ_get, _Core.ExternalForce_forceZ_set)
    __swig_setmethods__["torqueX"] = _Core.ExternalForce_torqueX_set
    __swig_getmethods__["torqueX"] = _Core.ExternalForce_torqueX_get
    if _newclass:
        torqueX = _swig_property(_Core.ExternalForce_torqueX_get, _Core.ExternalForce_torqueX_set)
    __swig_setmethods__["torqueY"] = _Core.ExternalForce_torqueY_set
    __swig_getmethods__["torqueY"] = _Core.ExternalForce_torqueY_get
    if _newclass:
        torqueY = _swig_property(_Core.ExternalForce_torqueY_get, _Core.ExternalForce_torqueY_set)
    __swig_setmethods__["torqueZ"] = _Core.ExternalForce_torqueZ_set
    __swig_getmethods__["torqueZ"] = _Core.ExternalForce_torqueZ_get
    if _newclass:
        torqueZ = _swig_property(_Core.ExternalForce_torqueZ_get, _Core.ExternalForce_torqueZ_set)

    def __init__(self):
        this = _Core.new_ExternalForce()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_ExternalForce
    __del__ = lambda self: None

    def setForceX(self, traj):
        return _Core.ExternalForce_setForceX(self, traj)

    def setForceY(self, traj):
        return _Core.ExternalForce_setForceY(self, traj)

    def setForceZ(self, traj):
        return _Core.ExternalForce_setForceZ(self, traj)

    def setTorqueX(self, traj):
        return _Core.ExternalForce_setTorqueX(self, traj)

    def setTorqueY(self, traj):
        return _Core.ExternalForce_setTorqueY(self, traj)

    def setTorqueZ(self, traj):
        return _Core.ExternalForce_setTorqueZ(self, traj)

    def getForceX(self):
        return _Core.ExternalForce_getForceX(self)

    def getForceY(self):
        return _Core.ExternalForce_getForceY(self)

    def getForceZ(self):
        return _Core.ExternalForce_getForceZ(self)

    def getTorqueX(self):
        return _Core.ExternalForce_getTorqueX(self)

    def getTorqueY(self):
        return _Core.ExternalForce_getTorqueY(self)

    def getTorqueZ(self):
        return _Core.ExternalForce_getTorqueZ(self)

    def getARB(self, stance):
        return _Core.ExternalForce_getARB(self, stance)

    def setBodyName(self, name):
        return _Core.ExternalForce_setBodyName(self, name)

    def getBodyName(self):
        return _Core.ExternalForce_getBodyName(self)
ExternalForce_swigregister = _Core.ExternalForce_swigregister
ExternalForce_swigregister(ExternalForce)

class Trajectory(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trajectory, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Trajectory, name)
    __repr__ = _swig_repr
    __swig_setmethods__["components"] = _Core.Trajectory_components_set
    __swig_getmethods__["components"] = _Core.Trajectory_components_get
    if _newclass:
        components = _swig_property(_Core.Trajectory_components_get, _Core.Trajectory_components_set)
    __swig_setmethods__["leftStanceIndex"] = _Core.Trajectory_leftStanceIndex_set
    __swig_getmethods__["leftStanceIndex"] = _Core.Trajectory_leftStanceIndex_get
    if _newclass:
        leftStanceIndex = _swig_property(_Core.Trajectory_leftStanceIndex_get, _Core.Trajectory_leftStanceIndex_set)
    __swig_setmethods__["rightStanceIndex"] = _Core.Trajectory_rightStanceIndex_set
    __swig_getmethods__["rightStanceIndex"] = _Core.Trajectory_rightStanceIndex_get
    if _newclass:
        rightStanceIndex = _swig_property(_Core.Trajectory_rightStanceIndex_get, _Core.Trajectory_rightStanceIndex_set)
    __swig_setmethods__["jName"] = _Core.Trajectory_jName_set
    __swig_getmethods__["jName"] = _Core.Trajectory_jName_get
    if _newclass:
        jName = _swig_property(_Core.Trajectory_jName_get, _Core.Trajectory_jName_set)
    __swig_setmethods__["relToCharFrame"] = _Core.Trajectory_relToCharFrame_set
    __swig_getmethods__["relToCharFrame"] = _Core.Trajectory_relToCharFrame_get
    if _newclass:
        relToCharFrame = _swig_property(_Core.Trajectory_relToCharFrame_get, _Core.Trajectory_relToCharFrame_set)
    __swig_setmethods__["strengthTraj"] = _Core.Trajectory_strengthTraj_set
    __swig_getmethods__["strengthTraj"] = _Core.Trajectory_strengthTraj_get
    if _newclass:
        strengthTraj = _swig_property(_Core.Trajectory_strengthTraj_get, _Core.Trajectory_strengthTraj_set)

    def __init__(self):
        this = _Core.new_Trajectory()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_Trajectory
    __del__ = lambda self: None

    def setStrengthTrajectory(self, traj):
        return _Core.Trajectory_setStrengthTrajectory(self, traj)

    def getStrengthTrajectory(self):
        return _Core.Trajectory_getStrengthTrajectory(self)

    def setRelativeToCharacterFrame(self, rel=True):
        return _Core.Trajectory_setRelativeToCharacterFrame(self, rel)

    def isRelativeToCharacterFrame(self):
        return _Core.Trajectory_isRelativeToCharacterFrame(self)

    def addTrajectoryComponent(self, trajComp_disown):
        return _Core.Trajectory_addTrajectoryComponent(self, trajComp_disown)

    def clearTrajectoryComponents(self):
        return _Core.Trajectory_clearTrajectoryComponents(self)

    def getTrajectoryComponent(self, index):
        return _Core.Trajectory_getTrajectoryComponent(self, index)

    def getTrajectoryComponentCount(self):
        return _Core.Trajectory_getTrajectoryComponentCount(self)

    def evaluateTrajectory(self, con, j, stance, phi, d, v, bareTrajectory=False):
        return _Core.Trajectory_evaluateTrajectory(self, con, j, stance, phi, d, v, bareTrajectory)

    def evaluateStrength(self, phiToUse):
        return _Core.Trajectory_evaluateStrength(self, phiToUse)

    def getJointIndex(self, stance):
        return _Core.Trajectory_getJointIndex(self, stance)

    def setJointName(self, name):
        return _Core.Trajectory_setJointName(self, name)

    def getJointName(self):
        return _Core.Trajectory_getJointName(self)

    def updateComponents(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, oldDTrajX, oldDTrajZ, oldVTrajX, oldVTrajZ, nbSamples):
        return _Core.Trajectory_updateComponents(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, oldDTrajX, oldDTrajZ, oldVTrajX, oldVTrajZ, nbSamples)

    def readTrajectory(self, f):
        return _Core.Trajectory_readTrajectory(self, f)

    def writeStrengthTrajectory(self, f):
        return _Core.Trajectory_writeStrengthTrajectory(self, f)

    def writeTrajectory(self, f):
        return _Core.Trajectory_writeTrajectory(self, f)
Trajectory_swigregister = _Core.Trajectory_swigregister
Trajectory_swigregister(Trajectory)

class SimBiConState(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBiConState, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBiConState, name)
    __repr__ = _swig_repr
    STATE_LEFT_STANCE = _Core.SimBiConState_STATE_LEFT_STANCE
    STATE_RIGHT_STANCE = _Core.SimBiConState_STATE_RIGHT_STANCE
    STATE_REVERSE_STANCE = _Core.SimBiConState_STATE_REVERSE_STANCE
    STATE_KEEP_STANCE = _Core.SimBiConState_STATE_KEEP_STANCE

    def __init__(self):
        this = _Core.new_SimBiConState()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_SimBiConState
    __del__ = lambda self: None

    def getStateStance(self, oldStance):
        return _Core.SimBiConState_getStateStance(self, oldStance)

    def getStateTime(self):
        return _Core.SimBiConState_getStateTime(self)

    def getNextStateIndex(self):
        return _Core.SimBiConState_getNextStateIndex(self)

    def getExternalForceCount(self):
        return _Core.SimBiConState_getExternalForceCount(self)

    def getExternalForce(self, *args):
        return _Core.SimBiConState_getExternalForce(self, *args)

    def getTrajectoryCount(self):
        return _Core.SimBiConState_getTrajectoryCount(self)

    def getTrajectory(self, *args):
        return _Core.SimBiConState_getTrajectory(self, *args)

    def setDTrajX(self, traj1d_disown):
        return _Core.SimBiConState_setDTrajX(self, traj1d_disown)

    def setDTrajZ(self, traj1d_disown):
        return _Core.SimBiConState_setDTrajZ(self, traj1d_disown)

    def setVTrajX(self, traj1d_disown):
        return _Core.SimBiConState_setVTrajX(self, traj1d_disown)

    def setVTrajZ(self, traj1d_disown):
        return _Core.SimBiConState_setVTrajZ(self, traj1d_disown)

    def getDTrajX(self):
        return _Core.SimBiConState_getDTrajX(self)

    def getDTrajZ(self):
        return _Core.SimBiConState_getDTrajZ(self)

    def getVTrajX(self):
        return _Core.SimBiConState_getVTrajX(self)

    def getVTrajZ(self):
        return _Core.SimBiConState_getVTrajZ(self)

    def needTransition(self, phi, swingFootVerticalForce, stanceFootVerticalForce):
        return _Core.SimBiConState_needTransition(self, phi, swingFootVerticalForce, stanceFootVerticalForce)

    def setName(self, name):
        return _Core.SimBiConState_setName(self, name)

    def setNextStateIndex(self, nextStateIndex):
        return _Core.SimBiConState_setNextStateIndex(self, nextStateIndex)

    def setTransitionOnFootContact(self, transition=True):
        return _Core.SimBiConState_setTransitionOnFootContact(self, transition)

    def getTransitionOnFootContact(self):
        return _Core.SimBiConState_getTransitionOnFootContact(self)

    def setStance(self, stanceType):
        return _Core.SimBiConState_setStance(self, stanceType)

    def getStance(self):
        return _Core.SimBiConState_getStance(self)

    def setDuration(self, duration):
        return _Core.SimBiConState_setDuration(self, duration)

    def getDuration(self):
        return _Core.SimBiConState_getDuration(self)

    def addExternalForce(self, extForce_disown):
        return _Core.SimBiConState_addExternalForce(self, extForce_disown)

    def clearExternalForce(self):
        return _Core.SimBiConState_clearExternalForce(self)

    def addTrajectory(self, traj_disown):
        return _Core.SimBiConState_addTrajectory(self, traj_disown)

    def clearTrajectories(self):
        return _Core.SimBiConState_clearTrajectories(self)

    def getName(self):
        return _Core.SimBiConState_getName(self)

    def readState(self, f, offset):
        return _Core.SimBiConState_readState(self, f, offset)

    def writeState(self, f, index):
        return _Core.SimBiConState_writeState(self, f, index)

    def updateDVTrajectories(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, nbSamples=100):
        return _Core.SimBiConState_updateDVTrajectories(self, con, j, newDTrajX, newDTrajZ, newVTrajX, newVTrajZ, nbSamples)
    __swig_getmethods__["readTrajectory1d"] = lambda x: _Core.SimBiConState_readTrajectory1d
    if _newclass:
        readTrajectory1d = staticmethod(_Core.SimBiConState_readTrajectory1d)
    __swig_getmethods__["writeTrajectory1d"] = lambda x: _Core.SimBiConState_writeTrajectory1d
    if _newclass:
        writeTrajectory1d = staticmethod(_Core.SimBiConState_writeTrajectory1d)
SimBiConState_swigregister = _Core.SimBiConState_swigregister
SimBiConState_swigregister(SimBiConState)

def SimBiConState_readTrajectory1d(f, result, endingLineType):
    return _Core.SimBiConState_readTrajectory1d(f, result, endingLineType)
SimBiConState_readTrajectory1d = _Core.SimBiConState_readTrajectory1d

def SimBiConState_writeTrajectory1d(f, result, startingLineType, endingLineType):
    return _Core.SimBiConState_writeTrajectory1d(f, result, startingLineType, endingLineType)
SimBiConState_writeTrajectory1d = _Core.SimBiConState_writeTrajectory1d

class Controller(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controller, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Controller, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_Controller
    __del__ = lambda self: None

    def setName(self, name):
        return _Core.Controller_setName(self, name)

    def getName(self):
        return _Core.Controller_getName(self)

    def getCharacter(self):
        return _Core.Controller_getCharacter(self)

    def performPreTasks(self, dt, cfs):
        return _Core.Controller_performPreTasks(self, dt, cfs)

    def performPostTasks(self, dt, cfs):
        return _Core.Controller_performPostTasks(self, dt, cfs)

    def computeTorques(self, cfs):
        return _Core.Controller_computeTorques(self, cfs)

    def applyTorques(self):
        return _Core.Controller_applyTorques(self)

    def resetTorques(self):
        return _Core.Controller_resetTorques(self)
Controller_swigregister = _Core.Controller_swigregister
Controller_swigregister(Controller)

class ControlParams(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControlParams, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControlParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["joint"] = _Core.ControlParams_joint_set
    __swig_getmethods__["joint"] = _Core.ControlParams_joint_get
    if _newclass:
        joint = _swig_property(_Core.ControlParams_joint_get, _Core.ControlParams_joint_set)
    __swig_setmethods__["controlled"] = _Core.ControlParams_controlled_set
    __swig_getmethods__["controlled"] = _Core.ControlParams_controlled_get
    if _newclass:
        controlled = _swig_property(_Core.ControlParams_controlled_get, _Core.ControlParams_controlled_set)
    __swig_setmethods__["kp"] = _Core.ControlParams_kp_set
    __swig_getmethods__["kp"] = _Core.ControlParams_kp_get
    if _newclass:
        kp = _swig_property(_Core.ControlParams_kp_get, _Core.ControlParams_kp_set)
    __swig_setmethods__["kd"] = _Core.ControlParams_kd_set
    __swig_getmethods__["kd"] = _Core.ControlParams_kd_get
    if _newclass:
        kd = _swig_property(_Core.ControlParams_kd_get, _Core.ControlParams_kd_set)
    __swig_setmethods__["maxAbsTorque"] = _Core.ControlParams_maxAbsTorque_set
    __swig_getmethods__["maxAbsTorque"] = _Core.ControlParams_maxAbsTorque_get
    if _newclass:
        maxAbsTorque = _swig_property(_Core.ControlParams_maxAbsTorque_get, _Core.ControlParams_maxAbsTorque_set)
    __swig_setmethods__["scale"] = _Core.ControlParams_scale_set
    __swig_getmethods__["scale"] = _Core.ControlParams_scale_get
    if _newclass:
        scale = _swig_property(_Core.ControlParams_scale_get, _Core.ControlParams_scale_set)
    __swig_setmethods__["qRelExternallyComputed"] = _Core.ControlParams_qRelExternallyComputed_set
    __swig_getmethods__["qRelExternallyComputed"] = _Core.ControlParams_qRelExternallyComputed_get
    if _newclass:
        qRelExternallyComputed = _swig_property(_Core.ControlParams_qRelExternallyComputed_get, _Core.ControlParams_qRelExternallyComputed_set)
    __swig_setmethods__["strength"] = _Core.ControlParams_strength_set
    __swig_getmethods__["strength"] = _Core.ControlParams_strength_get
    if _newclass:
        strength = _swig_property(_Core.ControlParams_strength_get, _Core.ControlParams_strength_set)
    __swig_setmethods__["relToFrame"] = _Core.ControlParams_relToFrame_set
    __swig_getmethods__["relToFrame"] = _Core.ControlParams_relToFrame_get
    if _newclass:
        relToFrame = _swig_property(_Core.ControlParams_relToFrame_get, _Core.ControlParams_relToFrame_set)
    __swig_setmethods__["frame"] = _Core.ControlParams_frame_set
    __swig_getmethods__["frame"] = _Core.ControlParams_frame_get
    if _newclass:
        frame = _swig_property(_Core.ControlParams_frame_get, _Core.ControlParams_frame_set)
    __swig_setmethods__["frameAngularVelocityInWorld"] = _Core.ControlParams_frameAngularVelocityInWorld_set
    __swig_getmethods__["frameAngularVelocityInWorld"] = _Core.ControlParams_frameAngularVelocityInWorld_get
    if _newclass:
        frameAngularVelocityInWorld = _swig_property(_Core.ControlParams_frameAngularVelocityInWorld_get, _Core.ControlParams_frameAngularVelocityInWorld_set)

    def __init__(self, *args):
        this = _Core.new_ControlParams(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getJointName(self):
        return _Core.ControlParams_getJointName(self)

    def getJoint(self):
        return _Core.ControlParams_getJoint(self)

    def setJoint(self, joint):
        return _Core.ControlParams_setJoint(self, joint)

    def setKp(self, kp):
        return _Core.ControlParams_setKp(self, kp)

    def getKp(self):
        return _Core.ControlParams_getKp(self)

    def setKd(self, kd):
        return _Core.ControlParams_setKd(self, kd)

    def getKd(self):
        return _Core.ControlParams_getKd(self)

    def setMaxAbsTorque(self, maxAbsTorque):
        return _Core.ControlParams_setMaxAbsTorque(self, maxAbsTorque)

    def getMaxAbsTorque(self):
        return _Core.ControlParams_getMaxAbsTorque(self)

    def setScale(self, scale):
        return _Core.ControlParams_setScale(self, scale)

    def getScale(self):
        return _Core.ControlParams_getScale(self)

    def setStrength(self, strength):
        return _Core.ControlParams_setStrength(self, strength)

    def getStrength(self):
        return _Core.ControlParams_getStrength(self)

    def setRelToFrame(self, relToFrame):
        return _Core.ControlParams_setRelToFrame(self, relToFrame)

    def getRelToFrame(self):
        return _Core.ControlParams_getRelToFrame(self)
    __swig_destroy__ = _Core.delete_ControlParams
    __del__ = lambda self: None
ControlParams_swigregister = _Core.ControlParams_swigregister
ControlParams_swigregister(ControlParams)

class PoseController(Controller):
    __swig_setmethods__ = {}
    for _s in [Controller]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoseController, name, value)
    __swig_getmethods__ = {}
    for _s in [Controller]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoseController, name)
    __repr__ = _swig_repr

    def __init__(self, ch):
        this = _Core.new_PoseController(ch)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_PoseController
    __del__ = lambda self: None

    def addControlParams(self, params):
        return _Core.PoseController_addControlParams(self, params)

    def getControlParams(self, index):
        return _Core.PoseController_getControlParams(self, index)

    def scaleGains(self, factor):
        return _Core.PoseController_scaleGains(self, factor)

    def getControlParamsCount(self):
        return _Core.PoseController_getControlParamsCount(self)

    def computeTorques(self, cfs):
        return _Core.PoseController_computeTorques(self, cfs)
    __swig_getmethods__["computePDTorque"] = lambda x: _Core.PoseController_computePDTorque
    if _newclass:
        computePDTorque = staticmethod(_Core.PoseController_computePDTorque)
    __swig_getmethods__["scaleAndLimitTorque"] = lambda x: _Core.PoseController_scaleAndLimitTorque
    if _newclass:
        scaleAndLimitTorque = staticmethod(_Core.PoseController_scaleAndLimitTorque)
    __swig_getmethods__["limitTorque"] = lambda x: _Core.PoseController_limitTorque
    if _newclass:
        limitTorque = staticmethod(_Core.PoseController_limitTorque)

    def readGains(self, *args):
        return _Core.PoseController_readGains(self, *args)

    def writeGains(self, f):
        return _Core.PoseController_writeGains(self, f)

    def setTargetsFromState(self):
        return _Core.PoseController_setTargetsFromState(self)
PoseController_swigregister = _Core.PoseController_swigregister
PoseController_swigregister(PoseController)

def PoseController_computePDTorque(qRel, qRelD, wRel, wRelD, pdParams):
    return _Core.PoseController_computePDTorque(qRel, qRelD, wRel, wRelD, pdParams)
PoseController_computePDTorque = _Core.PoseController_computePDTorque

def PoseController_scaleAndLimitTorque(torque, pdParams, qToChild):
    return _Core.PoseController_scaleAndLimitTorque(torque, pdParams, qToChild)
PoseController_scaleAndLimitTorque = _Core.PoseController_scaleAndLimitTorque

def PoseController_limitTorque(torque, cParams):
    return _Core.PoseController_limitTorque(torque, cParams)
PoseController_limitTorque = _Core.PoseController_limitTorque

class SimBiControllerState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBiControllerState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimBiControllerState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stance"] = _Core.SimBiControllerState_stance_set
    __swig_getmethods__["stance"] = _Core.SimBiControllerState_stance_get
    if _newclass:
        stance = _swig_property(_Core.SimBiControllerState_stance_get, _Core.SimBiControllerState_stance_set)
    __swig_setmethods__["phi"] = _Core.SimBiControllerState_phi_set
    __swig_getmethods__["phi"] = _Core.SimBiControllerState_phi_get
    if _newclass:
        phi = _swig_property(_Core.SimBiControllerState_phi_get, _Core.SimBiControllerState_phi_set)
    __swig_setmethods__["FSMStateIndex"] = _Core.SimBiControllerState_FSMStateIndex_set
    __swig_getmethods__["FSMStateIndex"] = _Core.SimBiControllerState_FSMStateIndex_get
    if _newclass:
        FSMStateIndex = _swig_property(_Core.SimBiControllerState_FSMStateIndex_get, _Core.SimBiControllerState_FSMStateIndex_set)
    __swig_setmethods__["bodyGroundContact"] = _Core.SimBiControllerState_bodyGroundContact_set
    __swig_getmethods__["bodyGroundContact"] = _Core.SimBiControllerState_bodyGroundContact_get
    if _newclass:
        bodyGroundContact = _swig_property(_Core.SimBiControllerState_bodyGroundContact_get, _Core.SimBiControllerState_bodyGroundContact_set)

    def __init__(self):
        this = _Core.new_SimBiControllerState()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_SimBiControllerState
    __del__ = lambda self: None
SimBiControllerState_swigregister = _Core.SimBiControllerState_swigregister
SimBiControllerState_swigregister(SimBiControllerState)

class SimBiController(PoseController):
    __swig_setmethods__ = {}
    for _s in [PoseController]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBiController, name, value)
    __swig_getmethods__ = {}
    for _s in [PoseController]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBiController, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startingState"] = _Core.SimBiController_startingState_set
    __swig_getmethods__["startingState"] = _Core.SimBiController_startingState_get
    if _newclass:
        startingState = _swig_property(_Core.SimBiController_startingState_get, _Core.SimBiController_startingState_set)
    __swig_setmethods__["startingStance"] = _Core.SimBiController_startingStance_set
    __swig_getmethods__["startingStance"] = _Core.SimBiController_startingStance_get
    if _newclass:
        startingStance = _swig_property(_Core.SimBiController_startingStance_get, _Core.SimBiController_startingStance_set)
    __swig_setmethods__["initialBipState"] = _Core.SimBiController_initialBipState_set
    __swig_getmethods__["initialBipState"] = _Core.SimBiController_initialBipState_get
    if _newclass:
        initialBipState = _swig_property(_Core.SimBiController_initialBipState_get, _Core.SimBiController_initialBipState_set)

    def __init__(self, b):
        this = _Core.new_SimBiController(b)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_SimBiController
    __del__ = lambda self: None

    def scaleGains(self, factor):
        return _Core.SimBiController_scaleGains(self, factor)

    def getPhiPtr(self):
        return _Core.SimBiController_getPhiPtr(self)

    def getDoubleStanceCOMError(self):
        return _Core.SimBiController_getDoubleStanceCOMError(self)

    def setStanceHipDamping(self, damping):
        return _Core.SimBiController_setStanceHipDamping(self, damping)

    def getStanceHipDamping(self):
        return _Core.SimBiController_getStanceHipDamping(self)

    def setStanceHipMaxVelocity(self, velocity):
        return _Core.SimBiController_setStanceHipMaxVelocity(self, velocity)

    def getStanceHipMaxVelocity(self):
        return _Core.SimBiController_getStanceHipMaxVelocity(self)

    def setStance(self, newStance):
        return _Core.SimBiController_setStance(self, newStance)

    def addControlParams(self, params):
        return _Core.SimBiController_addControlParams(self, params)

    def getRootControlParams(self):
        return _Core.SimBiController_getRootControlParams(self)

    def getState(self, idx):
        return _Core.SimBiController_getState(self, idx)

    def getCurrentState(self):
        return _Core.SimBiController_getCurrentState(self)

    def getStateCount(self):
        return _Core.SimBiController_getStateCount(self)

    def addState(self, state_disown):
        return _Core.SimBiController_addState(self, state_disown)

    def clearStates(self):
        return _Core.SimBiController_clearStates(self)

    def computeTorques(self, cfs):
        return _Core.SimBiController_computeTorques(self, cfs)

    def evaluateJointTargets(self):
        return _Core.SimBiController_evaluateJointTargets(self)

    def computePDTorques(self, cfs):
        return _Core.SimBiController_computePDTorques(self, cfs)

    def blendOutTorques(self):
        return _Core.SimBiController_blendOutTorques(self)

    def performPostTasks(self, dt, cfs):
        return _Core.SimBiController_performPostTasks(self, dt, cfs)

    def advanceInTime(self, dt, cfs):
        return _Core.SimBiController_advanceInTime(self, dt, cfs)

    def getControllerState(self, cs):
        return _Core.SimBiController_getControllerState(self, cs)

    def setControllerState(self, cs):
        return _Core.SimBiController_setControllerState(self, cs)

    def loadFromFile(self, fName):
        return _Core.SimBiController_loadFromFile(self, fName)

    def isBodyInContactWithTheGround(self):
        return _Core.SimBiController_isBodyInContactWithTheGround(self)

    def getPhase(self):
        return _Core.SimBiController_getPhase(self)

    def setPhase(self, phi):
        return _Core.SimBiController_setPhase(self, phi)

    def getV(self):
        return _Core.SimBiController_getV(self)

    def getD(self):
        return _Core.SimBiController_getD(self)

    def getStanceFootPos(self):
        return _Core.SimBiController_getStanceFootPos(self)

    def getSwingFootPos(self):
        return _Core.SimBiController_getSwingFootPos(self)

    def writeToFile(self, fileName, stateFileName=None):
        return _Core.SimBiController_writeToFile(self, fileName, stateFileName)

    def getFSMState(self):
        return _Core.SimBiController_getFSMState(self)

    def getCharacterFrame(self):
        return _Core.SimBiController_getCharacterFrame(self)

    def updateDAndV(self):
        return _Core.SimBiController_updateDAndV(self)

    def updateTrackingPose(self, trackingPose, phiToUse=-1, stanceToUse=-1):
        return _Core.SimBiController_updateTrackingPose(self, trackingPose, phiToUse, stanceToUse)

    def getStance(self):
        return _Core.SimBiController_getStance(self)

    def computeD0(self, phi, d0):
        return _Core.SimBiController_computeD0(self, phi, d0)

    def computeV0(self, phi, v0):
        return _Core.SimBiController_computeV0(self, phi, v0)
    __swig_getmethods__["computeDorV"] = lambda x: _Core.SimBiController_computeDorV
    if _newclass:
        computeDorV = staticmethod(_Core.SimBiController_computeDorV)

    def setStartingState(self, state):
        return _Core.SimBiController_setStartingState(self, state)

    def getStartingState(self):
        return _Core.SimBiController_getStartingState(self)
SimBiController_swigregister = _Core.SimBiController_swigregister
SimBiController_swigregister(SimBiController)

def SimBiController_computeDorV(phi, trajX, trajZ, stance, result):
    return _Core.SimBiController_computeDorV(phi, trajX, trajZ, stance, result)
SimBiController_computeDorV = _Core.SimBiController_computeDorV

class IKVMCController(SimBiController):
    __swig_setmethods__ = {}
    for _s in [SimBiController]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKVMCController, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBiController]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKVMCController, name)
    __repr__ = _swig_repr
    __swig_setmethods__["velDSagittal"] = _Core.IKVMCController_velDSagittal_set
    __swig_getmethods__["velDSagittal"] = _Core.IKVMCController_velDSagittal_get
    if _newclass:
        velDSagittal = _swig_property(_Core.IKVMCController_velDSagittal_get, _Core.IKVMCController_velDSagittal_set)
    __swig_setmethods__["velDCoronal"] = _Core.IKVMCController_velDCoronal_set
    __swig_getmethods__["velDCoronal"] = _Core.IKVMCController_velDCoronal_get
    if _newclass:
        velDCoronal = _swig_property(_Core.IKVMCController_velDCoronal_get, _Core.IKVMCController_velDCoronal_set)
    __swig_setmethods__["swingFootTrajectorySagittal"] = _Core.IKVMCController_swingFootTrajectorySagittal_set
    __swig_getmethods__["swingFootTrajectorySagittal"] = _Core.IKVMCController_swingFootTrajectorySagittal_get
    if _newclass:
        swingFootTrajectorySagittal = _swig_property(_Core.IKVMCController_swingFootTrajectorySagittal_get, _Core.IKVMCController_swingFootTrajectorySagittal_set)
    __swig_setmethods__["swingFootTrajectoryCoronal"] = _Core.IKVMCController_swingFootTrajectoryCoronal_set
    __swig_getmethods__["swingFootTrajectoryCoronal"] = _Core.IKVMCController_swingFootTrajectoryCoronal_get
    if _newclass:
        swingFootTrajectoryCoronal = _swig_property(_Core.IKVMCController_swingFootTrajectoryCoronal_get, _Core.IKVMCController_swingFootTrajectoryCoronal_set)
    __swig_setmethods__["swingFootHeightTrajectory"] = _Core.IKVMCController_swingFootHeightTrajectory_set
    __swig_getmethods__["swingFootHeightTrajectory"] = _Core.IKVMCController_swingFootHeightTrajectory_get
    if _newclass:
        swingFootHeightTrajectory = _swig_property(_Core.IKVMCController_swingFootHeightTrajectory_get, _Core.IKVMCController_swingFootHeightTrajectory_set)
    __swig_setmethods__["swingFootTrajectoryDeltaSagittal"] = _Core.IKVMCController_swingFootTrajectoryDeltaSagittal_set
    __swig_getmethods__["swingFootTrajectoryDeltaSagittal"] = _Core.IKVMCController_swingFootTrajectoryDeltaSagittal_get
    if _newclass:
        swingFootTrajectoryDeltaSagittal = _swig_property(_Core.IKVMCController_swingFootTrajectoryDeltaSagittal_get, _Core.IKVMCController_swingFootTrajectoryDeltaSagittal_set)
    __swig_setmethods__["swingFootTrajectoryDeltaCoronal"] = _Core.IKVMCController_swingFootTrajectoryDeltaCoronal_set
    __swig_getmethods__["swingFootTrajectoryDeltaCoronal"] = _Core.IKVMCController_swingFootTrajectoryDeltaCoronal_get
    if _newclass:
        swingFootTrajectoryDeltaCoronal = _swig_property(_Core.IKVMCController_swingFootTrajectoryDeltaCoronal_get, _Core.IKVMCController_swingFootTrajectoryDeltaCoronal_set)
    __swig_setmethods__["swingFootTrajectoryDeltaHeight"] = _Core.IKVMCController_swingFootTrajectoryDeltaHeight_set
    __swig_getmethods__["swingFootTrajectoryDeltaHeight"] = _Core.IKVMCController_swingFootTrajectoryDeltaHeight_get
    if _newclass:
        swingFootTrajectoryDeltaHeight = _swig_property(_Core.IKVMCController_swingFootTrajectoryDeltaHeight_get, _Core.IKVMCController_swingFootTrajectoryDeltaHeight_set)
    __swig_setmethods__["swingLegPlaneOfRotation"] = _Core.IKVMCController_swingLegPlaneOfRotation_set
    __swig_getmethods__["swingLegPlaneOfRotation"] = _Core.IKVMCController_swingLegPlaneOfRotation_get
    if _newclass:
        swingLegPlaneOfRotation = _swig_property(_Core.IKVMCController_swingLegPlaneOfRotation_get, _Core.IKVMCController_swingLegPlaneOfRotation_set)
    __swig_setmethods__["doubleStanceMode"] = _Core.IKVMCController_doubleStanceMode_set
    __swig_getmethods__["doubleStanceMode"] = _Core.IKVMCController_doubleStanceMode_get
    if _newclass:
        doubleStanceMode = _swig_property(_Core.IKVMCController_doubleStanceMode_get, _Core.IKVMCController_doubleStanceMode_set)
    __swig_setmethods__["comOffsetSagittal"] = _Core.IKVMCController_comOffsetSagittal_set
    __swig_getmethods__["comOffsetSagittal"] = _Core.IKVMCController_comOffsetSagittal_get
    if _newclass:
        comOffsetSagittal = _swig_property(_Core.IKVMCController_comOffsetSagittal_get, _Core.IKVMCController_comOffsetSagittal_set)
    __swig_setmethods__["comOffsetCoronal"] = _Core.IKVMCController_comOffsetCoronal_set
    __swig_getmethods__["comOffsetCoronal"] = _Core.IKVMCController_comOffsetCoronal_get
    if _newclass:
        comOffsetCoronal = _swig_property(_Core.IKVMCController_comOffsetCoronal_get, _Core.IKVMCController_comOffsetCoronal_set)
    __swig_setmethods__["panicHeight"] = _Core.IKVMCController_panicHeight_set
    __swig_getmethods__["panicHeight"] = _Core.IKVMCController_panicHeight_get
    if _newclass:
        panicHeight = _swig_property(_Core.IKVMCController_panicHeight_get, _Core.IKVMCController_panicHeight_set)
    __swig_setmethods__["unplannedForHeight"] = _Core.IKVMCController_unplannedForHeight_set
    __swig_getmethods__["unplannedForHeight"] = _Core.IKVMCController_unplannedForHeight_get
    if _newclass:
        unplannedForHeight = _swig_property(_Core.IKVMCController_unplannedForHeight_get, _Core.IKVMCController_unplannedForHeight_set)

    def __init__(self, b):
        this = _Core.new_IKVMCController(b)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_IKVMCController
    __del__ = lambda self: None

    def setSwingFootTrajectoryDeltaSagittal(self, traj):
        return _Core.IKVMCController_setSwingFootTrajectoryDeltaSagittal(self, traj)

    def getSwingFootTrajectoryDeltaSagittal(self):
        return _Core.IKVMCController_getSwingFootTrajectoryDeltaSagittal(self)

    def setSwingFootTrajectoryDeltaCoronal(self, traj):
        return _Core.IKVMCController_setSwingFootTrajectoryDeltaCoronal(self, traj)

    def getSwingFootTrajectoryDeltaCoronal(self):
        return _Core.IKVMCController_getSwingFootTrajectoryDeltaCoronal(self)

    def setSwingFootTrajectoryDeltaHeight(self, traj):
        return _Core.IKVMCController_setSwingFootTrajectoryDeltaHeight(self, traj)

    def getSwingFootTrajectoryDeltaHeight(self):
        return _Core.IKVMCController_getSwingFootTrajectoryDeltaHeight(self)

    def computeSwingFootDelta(self, phiToUse=-1, stanceToUse=-1):
        return _Core.IKVMCController_computeSwingFootDelta(self, phiToUse, stanceToUse)

    def setBehaviour(self, behaviour_disown):
        return _Core.IKVMCController_setBehaviour(self, behaviour_disown)

    def getBehaviour(self):
        return _Core.IKVMCController_getBehaviour(self)

    def computeIPStepLocation(self):
        return _Core.IKVMCController_computeIPStepLocation(self)

    def computeIKSwingLegTargets(self, dt):
        return _Core.IKVMCController_computeIKSwingLegTargets(self, dt)

    def computeTorques(self, cfs):
        return _Core.IKVMCController_computeTorques(self, cfs)

    def getSwingFootTargetLocation(self, t, com, charFrameToWorld):
        return _Core.IKVMCController_getSwingFootTargetLocation(self, t, com, charFrameToWorld)

    def computeGravityCompensationTorques(self):
        return _Core.IKVMCController_computeGravityCompensationTorques(self)

    def updateSwingAndStanceReferences(self):
        return _Core.IKVMCController_updateSwingAndStanceReferences(self)

    def computeIKQandW(self, parentJIndex, childJIndex, parentAxis, parentNormal, childNormal, childEndEffector, wP, computeAngVelocities, futureWP, dt):
        return _Core.IKVMCController_computeIKQandW(self, parentJIndex, childJIndex, parentAxis, parentNormal, childNormal, childEndEffector, wP, computeAngVelocities, futureWP, dt)

    def bubbleUpTorques(self):
        return _Core.IKVMCController_bubbleUpTorques(self)

    def computeLegTorques(self, ankleIndex, kneeIndex, hipIndex, cfs):
        return _Core.IKVMCController_computeLegTorques(self, ankleIndex, kneeIndex, hipIndex, cfs)

    def COMJT(self, cfs):
        return _Core.IKVMCController_COMJT(self, cfs)

    def computeVirtualForce(self):
        return _Core.IKVMCController_computeVirtualForce(self)

    def preprocessAnkleVTorque(self, ankleJointIndex, cfs, ankleVTorque):
        return _Core.IKVMCController_preprocessAnkleVTorque(self, ankleJointIndex, cfs, ankleVTorque)

    def performPreTasks(self, dt, cfs):
        return _Core.IKVMCController_performPreTasks(self, dt, cfs)

    def performPostTasks(self, dt, cfs):
        return _Core.IKVMCController_performPostTasks(self, dt, cfs)
IKVMCController_swigregister = _Core.IKVMCController_swigregister
IKVMCController_swigregister(IKVMCController)

class WorldOracle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldOracle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldOracle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Core.new_WorldOracle()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_WorldOracle
    __del__ = lambda self: None

    def getWorldHeightAt(self, worldLoc):
        return _Core.WorldOracle_getWorldHeightAt(self, worldLoc)

    def initializeWorld(self, physicalWorld):
        return _Core.WorldOracle_initializeWorld(self, physicalWorld)

    def draw(self):
        return _Core.WorldOracle_draw(self)
WorldOracle_swigregister = _Core.WorldOracle_swigregister
WorldOracle_swigregister(WorldOracle)

class BehaviourController(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehaviourController, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BehaviourController, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alternateFootTraj"] = _Core.BehaviourController_alternateFootTraj_set
    __swig_getmethods__["alternateFootTraj"] = _Core.BehaviourController_alternateFootTraj_get
    if _newclass:
        alternateFootTraj = _swig_property(_Core.BehaviourController_alternateFootTraj_get, _Core.BehaviourController_alternateFootTraj_set)

    def setUpperBodyPose(self, leanSagittal, leanCoronal, twist):
        return _Core.BehaviourController_setUpperBodyPose(self, leanSagittal, leanCoronal, twist)

    def setKneeBend(self, v, swingAlso=False):
        return _Core.BehaviourController_setKneeBend(self, v, swingAlso)

    def setDuckWalkDegree(self, v):
        return _Core.BehaviourController_setDuckWalkDegree(self, v)

    def setDesiredHeading(self, v):
        return _Core.BehaviourController_setDesiredHeading(self, v)

    def setVelocities(self, velDS, velDC):
        return _Core.BehaviourController_setVelocities(self, velDS, velDC)

    def __init__(self, b, llc, w=None):
        this = _Core.new_BehaviourController(b, llc, w)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_BehaviourController
    __del__ = lambda self: None

    def adjustStepHeight(self):
        return _Core.BehaviourController_adjustStepHeight(self)

    def setElbowAngles(self, leftElbowAngle, rightElbowAngle):
        return _Core.BehaviourController_setElbowAngles(self, leftElbowAngle, rightElbowAngle)

    def setShoulderAngles(self, leftTwist, rightTwist, leftAdduction, rightAdduction, leftSwing, rightSwing):
        return _Core.BehaviourController_setShoulderAngles(self, leftTwist, rightTwist, leftAdduction, rightAdduction, leftSwing, rightSwing)

    def requestStepTime(self, stepTime):
        return _Core.BehaviourController_requestStepTime(self, stepTime)

    def requestStepHeight(self, stepHeight):
        return _Core.BehaviourController_requestStepHeight(self, stepHeight)

    def requestVelocities(self, velDS, velDC):
        return _Core.BehaviourController_requestVelocities(self, velDS, velDC)

    def requestUpperBodyPose(self, leanS, leanC, twist):
        return _Core.BehaviourController_requestUpperBodyPose(self, leanS, leanC, twist)

    def requestKneeBend(self, kb):
        return _Core.BehaviourController_requestKneeBend(self, kb)

    def requestDuckFootedness(self, df):
        return _Core.BehaviourController_requestDuckFootedness(self, df)

    def requestCoronalStepWidth(self, corSW):
        return _Core.BehaviourController_requestCoronalStepWidth(self, corSW)

    def getDesiredStepTime(self):
        return _Core.BehaviourController_getDesiredStepTime(self)

    def getDesiredVelocitySagittal(self):
        return _Core.BehaviourController_getDesiredVelocitySagittal(self)

    def getCoronalStepWidth(self):
        return _Core.BehaviourController_getCoronalStepWidth(self)

    def setDesiredSwingFootLocation(self):
        return _Core.BehaviourController_setDesiredSwingFootLocation(self)

    def computeSwingFootLocationEstimate(self, comPos, phase):
        return _Core.BehaviourController_computeSwingFootLocationEstimate(self, comPos, phase)

    def requestHeading(self, v):
        return _Core.BehaviourController_requestHeading(self, v)

    def initializeDefaultParameters(self):
        return _Core.BehaviourController_initializeDefaultParameters(self)

    def simStepPlan(self, dt):
        return _Core.BehaviourController_simStepPlan(self, dt)

    def conTransitionPlan(self):
        return _Core.BehaviourController_conTransitionPlan(self)

    def getPanicLevel(self):
        return _Core.BehaviourController_getPanicLevel(self)

    def shouldAbort(self):
        return _Core.BehaviourController_shouldAbort(self)

    def onAbort(self):
        return _Core.BehaviourController_onAbort(self)

    def detectPossibleLegCrossing(self, swingFootPos, viaPoint):
        return _Core.BehaviourController_detectPossibleLegCrossing(self, swingFootPos, viaPoint)

    def adjustCoronalStepLocation(self, IPPrediction):
        return _Core.BehaviourController_adjustCoronalStepLocation(self, IPPrediction)
BehaviourController_swigregister = _Core.BehaviourController_swigregister
BehaviourController_swigregister(BehaviourController)

class TurnController(BehaviourController):
    __swig_setmethods__ = {}
    for _s in [BehaviourController]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TurnController, name, value)
    __swig_getmethods__ = {}
    for _s in [BehaviourController]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TurnController, name)
    __repr__ = _swig_repr

    def __init__(self, b, llc, w=None):
        this = _Core.new_TurnController(b, llc, w)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_TurnController
    __del__ = lambda self: None

    def initializeDefaultParameters(self):
        return _Core.TurnController_initializeDefaultParameters(self)

    def simStepPlan(self, dt):
        return _Core.TurnController_simStepPlan(self, dt)

    def conTransitionPlan(self):
        return _Core.TurnController_conTransitionPlan(self)

    def getPanicLevel(self):
        return _Core.TurnController_getPanicLevel(self)

    def requestHeading(self, v):
        return _Core.TurnController_requestHeading(self, v)
TurnController_swigregister = _Core.TurnController_swigregister
TurnController_swigregister(TurnController)

class DuckController(BehaviourController):
    __swig_setmethods__ = {}
    for _s in [BehaviourController]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuckController, name, value)
    __swig_getmethods__ = {}
    for _s in [BehaviourController]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuckController, name)
    __repr__ = _swig_repr

    def __init__(self, b, llc, w=None):
        this = _Core.new_DuckController(b, llc, w)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Core.delete_DuckController
    __del__ = lambda self: None

    def simStepPlan(self, dt):
        return _Core.DuckController_simStepPlan(self, dt)

    def getPanicLevel(self):
        return _Core.DuckController_getPanicLevel(self)
DuckController_swigregister = _Core.DuckController_swigregister
DuckController_swigregister(DuckController)

class TwoLinkIK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoLinkIK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoLinkIK, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["solve"] = lambda x: _Core.TwoLinkIK_solve
    if _newclass:
        solve = staticmethod(_Core.TwoLinkIK_solve)
    __swig_getmethods__["getParentOrientation"] = lambda x: _Core.TwoLinkIK_getParentOrientation
    if _newclass:
        getParentOrientation = staticmethod(_Core.TwoLinkIK_getParentOrientation)
    __swig_getmethods__["getChildRotationAngle"] = lambda x: _Core.TwoLinkIK_getChildRotationAngle
    if _newclass:
        getChildRotationAngle = staticmethod(_Core.TwoLinkIK_getChildRotationAngle)
    __swig_getmethods__["getIKOrientations"] = lambda x: _Core.TwoLinkIK_getIKOrientations
    if _newclass:
        getIKOrientations = staticmethod(_Core.TwoLinkIK_getIKOrientations)
TwoLinkIK_swigregister = _Core.TwoLinkIK_swigregister
TwoLinkIK_swigregister(TwoLinkIK)

def TwoLinkIK_solve(p1, p2, n, r1, r2):
    return _Core.TwoLinkIK_solve(p1, p2, n, r1, r2)
TwoLinkIK_solve = _Core.TwoLinkIK_solve

def TwoLinkIK_getParentOrientation(vGlobal, nGlobal, vLocal, nLocal):
    return _Core.TwoLinkIK_getParentOrientation(vGlobal, nGlobal, vLocal, nLocal)
TwoLinkIK_getParentOrientation = _Core.TwoLinkIK_getParentOrientation

def TwoLinkIK_getChildRotationAngle(vParent, vChild, n):
    return _Core.TwoLinkIK_getChildRotationAngle(vParent, vChild, n)
TwoLinkIK_getChildRotationAngle = _Core.TwoLinkIK_getChildRotationAngle

def TwoLinkIK_getIKOrientations(p1, p2, n, vParent, nParent, vChild, qP, qC):
    return _Core.TwoLinkIK_getIKOrientations(p1, p2, n, vParent, nParent, vChild, qP, qC)
TwoLinkIK_getIKOrientations = _Core.TwoLinkIK_getIKOrientations


def castToCharacter(obj):
    return _Core.castToCharacter(obj)
castToCharacter = _Core.castToCharacter

def castToController(obj):
    return _Core.castToController(obj)
castToController = _Core.castToController

def castToPoseController(obj):
    return _Core.castToPoseController(obj)
castToPoseController = _Core.castToPoseController

def castToSimBiController(obj):
    return _Core.castToSimBiController(obj)
castToSimBiController = _Core.castToSimBiController

def castToIKVMCController(obj):
    return _Core.castToIKVMCController(obj)
castToIKVMCController = _Core.castToIKVMCController

def castToControlParams(obj):
    return _Core.castToControlParams(obj)
castToControlParams = _Core.castToControlParams

def castToSimBiConState(obj):
    return _Core.castToSimBiConState(obj)
castToSimBiConState = _Core.castToSimBiConState

def castToExternalForce(obj):
    return _Core.castToExternalForce(obj)
castToExternalForce = _Core.castToExternalForce

def castToTrajectory(obj):
    return _Core.castToTrajectory(obj)
castToTrajectory = _Core.castToTrajectory

def castToTrajectoryComponent(obj):
    return _Core.castToTrajectoryComponent(obj)
castToTrajectoryComponent = _Core.castToTrajectoryComponent

def castToBalanceFeedback(obj):
    return _Core.castToBalanceFeedback(obj)
castToBalanceFeedback = _Core.castToBalanceFeedback

def castToLinearBalanceFeedback(obj):
    return _Core.castToLinearBalanceFeedback(obj)
castToLinearBalanceFeedback = _Core.castToLinearBalanceFeedback
# This file is compatible with both classic and new-style classes.


