# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Physics', [dirname(__file__)])
        except ImportError:
            import _Physics
            return _Physics
        if fp is not None:
            try:
                _mod = imp.load_module('_Physics', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Physics = swig_import_helper()
    del swig_import_helper
else:
    import _Physics
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import Utils

_Physics.UNKNOWN_CDP_swigconstant(_Physics)
UNKNOWN_CDP = _Physics.UNKNOWN_CDP

_Physics.SPHERE_CDP_swigconstant(_Physics)
SPHERE_CDP = _Physics.SPHERE_CDP

_Physics.CAPSULE_CDP_swigconstant(_Physics)
CAPSULE_CDP = _Physics.CAPSULE_CDP

_Physics.PLANE_CDP_swigconstant(_Physics)
PLANE_CDP = _Physics.PLANE_CDP

_Physics.BOX_CDP_swigconstant(_Physics)
BOX_CDP = _Physics.BOX_CDP
class CollisionDetectionPrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollisionDetectionPrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollisionDetectionPrimitive, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics.delete_CollisionDetectionPrimitive
    __del__ = lambda self: None

    def typeName(self):
        return _Physics.CollisionDetectionPrimitive_typeName(self)

    def save(self):
        return _Physics.CollisionDetectionPrimitive_save(self)

    def attachBody(self, body):
        return _Physics.CollisionDetectionPrimitive_attachBody(self, body)

    def updateToWorldPrimitive(self):
        return _Physics.CollisionDetectionPrimitive_updateToWorldPrimitive(self)

    def draw(self):
        return _Physics.CollisionDetectionPrimitive_draw(self)

    def getType(self):
        return _Physics.CollisionDetectionPrimitive_getType(self)

    def computeCollisionsWith(self, other, cps):
        return _Physics.CollisionDetectionPrimitive_computeCollisionsWith(self, other, cps)

    def computeCollisionsWithSphereCDP(self, sp, cps):
        return _Physics.CollisionDetectionPrimitive_computeCollisionsWithSphereCDP(self, sp, cps)

    def computeCollisionsWithPlaneCDP(self, sp, cps):
        return _Physics.CollisionDetectionPrimitive_computeCollisionsWithPlaneCDP(self, sp, cps)

    def computeCollisionsWithCapsuleCDP(self, sp, cps):
        return _Physics.CollisionDetectionPrimitive_computeCollisionsWithCapsuleCDP(self, sp, cps)

    def computeCollisionsWithBoxCDP(self, sp, cps):
        return _Physics.CollisionDetectionPrimitive_computeCollisionsWithBoxCDP(self, sp, cps)
CollisionDetectionPrimitive_swigregister = _Physics.CollisionDetectionPrimitive_swigregister
CollisionDetectionPrimitive_swigregister(CollisionDetectionPrimitive)

class BoxCDP(CollisionDetectionPrimitive):
    __swig_setmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxCDP, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxCDP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Physics.new_BoxCDP(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_BoxCDP
    __del__ = lambda self: None

    def save(self):
        return _Physics.BoxCDP_save(self)

    def updateToWorldPrimitive(self):
        return _Physics.BoxCDP_updateToWorldPrimitive(self)

    def draw(self):
        return _Physics.BoxCDP_draw(self)

    def getPoint1(self):
        return _Physics.BoxCDP_getPoint1(self)

    def setPoint1(self, point1):
        return _Physics.BoxCDP_setPoint1(self, point1)

    def getPoint2(self):
        return _Physics.BoxCDP_getPoint2(self)

    def setPoint2(self, point2):
        return _Physics.BoxCDP_setPoint2(self, point2)

    def getCenter(self):
        return _Physics.BoxCDP_getCenter(self)

    def getXLen(self):
        return _Physics.BoxCDP_getXLen(self)

    def getYLen(self):
        return _Physics.BoxCDP_getYLen(self)

    def getZLen(self):
        return _Physics.BoxCDP_getZLen(self)

    def computeCollisionsWith(self, other, cps):
        return _Physics.BoxCDP_computeCollisionsWith(self, other, cps)

    def computeCollisionsWithSphereCDP(self, sp, cps):
        return _Physics.BoxCDP_computeCollisionsWithSphereCDP(self, sp, cps)

    def computeCollisionsWithPlaneCDP(self, sp, cps):
        return _Physics.BoxCDP_computeCollisionsWithPlaneCDP(self, sp, cps)

    def computeCollisionsWithCapsuleCDP(self, sp, cps):
        return _Physics.BoxCDP_computeCollisionsWithCapsuleCDP(self, sp, cps)

    def computeCollisionsWithBoxCDP(self, sp, cps):
        return _Physics.BoxCDP_computeCollisionsWithBoxCDP(self, sp, cps)
BoxCDP_swigregister = _Physics.BoxCDP_swigregister
BoxCDP_swigregister(BoxCDP)

class CapsuleCDP(CollisionDetectionPrimitive):
    __swig_setmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapsuleCDP, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapsuleCDP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Physics.new_CapsuleCDP(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_CapsuleCDP
    __del__ = lambda self: None

    def save(self):
        return _Physics.CapsuleCDP_save(self)

    def updateToWorldPrimitive(self):
        return _Physics.CapsuleCDP_updateToWorldPrimitive(self)

    def draw(self):
        return _Physics.CapsuleCDP_draw(self)

    def getRadius(self):
        return _Physics.CapsuleCDP_getRadius(self)

    def setRadius(self, radius):
        return _Physics.CapsuleCDP_setRadius(self, radius)

    def getPoint1(self):
        return _Physics.CapsuleCDP_getPoint1(self)

    def setPoint1(self, point1):
        return _Physics.CapsuleCDP_setPoint1(self, point1)

    def getPoint2(self):
        return _Physics.CapsuleCDP_getPoint2(self)

    def setPoint2(self, point2):
        return _Physics.CapsuleCDP_setPoint2(self, point2)

    def computeCollisionsWith(self, other, cps):
        return _Physics.CapsuleCDP_computeCollisionsWith(self, other, cps)

    def computeCollisionsWithSphereCDP(self, sp, cps):
        return _Physics.CapsuleCDP_computeCollisionsWithSphereCDP(self, sp, cps)

    def computeCollisionsWithPlaneCDP(self, p, cps):
        return _Physics.CapsuleCDP_computeCollisionsWithPlaneCDP(self, p, cps)

    def computeCollisionsWithCapsuleCDP(self, c, cps):
        return _Physics.CapsuleCDP_computeCollisionsWithCapsuleCDP(self, c, cps)

    def computeCollisionsWithBoxCDP(self, sp, cps):
        return _Physics.CapsuleCDP_computeCollisionsWithBoxCDP(self, sp, cps)
CapsuleCDP_swigregister = _Physics.CapsuleCDP_swigregister
CapsuleCDP_swigregister(CapsuleCDP)

class PlaneCDP(CollisionDetectionPrimitive):
    __swig_setmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneCDP, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneCDP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Physics.new_PlaneCDP(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_PlaneCDP
    __del__ = lambda self: None

    def save(self):
        return _Physics.PlaneCDP_save(self)

    def updateToWorldPrimitive(self):
        return _Physics.PlaneCDP_updateToWorldPrimitive(self)

    def draw(self):
        return _Physics.PlaneCDP_draw(self)

    def getNormal(self):
        return _Physics.PlaneCDP_getNormal(self)

    def setNormal(self, normal):
        return _Physics.PlaneCDP_setNormal(self, normal)

    def getOrigin(self):
        return _Physics.PlaneCDP_getOrigin(self)

    def setOrigin(self, origin):
        return _Physics.PlaneCDP_setOrigin(self, origin)

    def computeCollisionsWith(self, other, cps):
        return _Physics.PlaneCDP_computeCollisionsWith(self, other, cps)

    def computeCollisionsWithSphereCDP(self, sp, cps):
        return _Physics.PlaneCDP_computeCollisionsWithSphereCDP(self, sp, cps)

    def computeCollisionsWithPlaneCDP(self, sp, cps):
        return _Physics.PlaneCDP_computeCollisionsWithPlaneCDP(self, sp, cps)

    def computeCollisionsWithCapsuleCDP(self, c, cps):
        return _Physics.PlaneCDP_computeCollisionsWithCapsuleCDP(self, c, cps)

    def computeCollisionsWithBoxCDP(self, sp, cps):
        return _Physics.PlaneCDP_computeCollisionsWithBoxCDP(self, sp, cps)
PlaneCDP_swigregister = _Physics.PlaneCDP_swigregister
PlaneCDP_swigregister(PlaneCDP)

class SphereCDP(CollisionDetectionPrimitive):
    __swig_setmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereCDP, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionDetectionPrimitive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereCDP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s"] = _Physics.SphereCDP_s_set
    __swig_getmethods__["s"] = _Physics.SphereCDP_s_get
    if _newclass:
        s = _swig_property(_Physics.SphereCDP_s_get, _Physics.SphereCDP_s_set)
    __swig_setmethods__["wS"] = _Physics.SphereCDP_wS_set
    __swig_getmethods__["wS"] = _Physics.SphereCDP_wS_get
    if _newclass:
        wS = _swig_property(_Physics.SphereCDP_wS_get, _Physics.SphereCDP_wS_set)

    def __init__(self, *args):
        this = _Physics.new_SphereCDP(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_SphereCDP
    __del__ = lambda self: None

    def save(self):
        return _Physics.SphereCDP_save(self)

    def updateToWorldPrimitive(self):
        return _Physics.SphereCDP_updateToWorldPrimitive(self)

    def draw(self):
        return _Physics.SphereCDP_draw(self)

    def getRadius(self):
        return _Physics.SphereCDP_getRadius(self)

    def setRadius(self, radius):
        return _Physics.SphereCDP_setRadius(self, radius)

    def getCenter(self):
        return _Physics.SphereCDP_getCenter(self)

    def setCenter(self, center):
        return _Physics.SphereCDP_setCenter(self, center)

    def computeCollisionsWith(self, other, cps):
        return _Physics.SphereCDP_computeCollisionsWith(self, other, cps)

    def computeCollisionsWithSphereCDP(self, sp, cps):
        return _Physics.SphereCDP_computeCollisionsWithSphereCDP(self, sp, cps)

    def computeCollisionsWithPlaneCDP(self, p, cps):
        return _Physics.SphereCDP_computeCollisionsWithPlaneCDP(self, p, cps)

    def computeCollisionsWithCapsuleCDP(self, sp, cps):
        return _Physics.SphereCDP_computeCollisionsWithCapsuleCDP(self, sp, cps)

    def computeCollisionsWithBoxCDP(self, sp, cps):
        return _Physics.SphereCDP_computeCollisionsWithBoxCDP(self, sp, cps)
SphereCDP_swigregister = _Physics.SphereCDP_swigregister
SphereCDP_swigregister(SphereCDP)


_Physics.STIFF_JOINT_swigconstant(_Physics)
STIFF_JOINT = _Physics.STIFF_JOINT

_Physics.HINGE_JOINT_swigconstant(_Physics)
HINGE_JOINT = _Physics.HINGE_JOINT

_Physics.BALL_IN_SOCKET_JOINT_swigconstant(_Physics)
BALL_IN_SOCKET_JOINT = _Physics.BALL_IN_SOCKET_JOINT

_Physics.UNIVERSAL_JOINT_swigconstant(_Physics)
UNIVERSAL_JOINT = _Physics.UNIVERSAL_JOINT
class Joint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics.delete_Joint
    __del__ = lambda self: None

    def typeName(self):
        return _Physics.Joint_typeName(self)

    def fixJointConstraints(self, fixOrientations, fixVelocities, recursive):
        return _Physics.Joint_fixJointConstraints(self, fixOrientations, fixVelocities, recursive)

    def loadFromFile(self, fp, world):
        return _Physics.Joint_loadFromFile(self, fp, world)

    def getJointType(self):
        return _Physics.Joint_getJointType(self)

    def setTorque(self, t):
        return _Physics.Joint_setTorque(self, t)

    def getParent(self):
        return _Physics.Joint_getParent(self)

    def setParent(self, parent):
        return _Physics.Joint_setParent(self, parent)

    def getChild(self):
        return _Physics.Joint_getChild(self)

    def setChild(self, child):
        return _Physics.Joint_setChild(self, child)

    def getChildJointPosition(self):
        return _Physics.Joint_getChildJointPosition(self)

    def setChildJointPosition(self, cJPos):
        return _Physics.Joint_setChildJointPosition(self, cJPos)

    def getParentJointPosition(self):
        return _Physics.Joint_getParentJointPosition(self)

    def setParentJointPosition(self, pJPos):
        return _Physics.Joint_setParentJointPosition(self, pJPos)

    def getName(self):
        return _Physics.Joint_getName(self)

    def setName(self, name):
        return _Physics.Joint_setName(self, name)
Joint_swigregister = _Physics.Joint_swigregister
Joint_swigregister(Joint)

class StiffJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StiffJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StiffJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_StiffJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_StiffJoint
    __del__ = lambda self: None

    def fixAngularConstraint(self, qRel):
        return _Physics.StiffJoint_fixAngularConstraint(self, qRel)

    def getJointType(self):
        return _Physics.StiffJoint_getJointType(self)
StiffJoint_swigregister = _Physics.StiffJoint_swigregister
StiffJoint_swigregister(StiffJoint)

class HingeJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HingeJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HingeJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_HingeJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_HingeJoint
    __del__ = lambda self: None

    def readAxes(self, axes):
        return _Physics.HingeJoint_readAxes(self, axes)

    def setAxis(self, axis):
        return _Physics.HingeJoint_setAxis(self, axis)

    def getAxis(self):
        return _Physics.HingeJoint_getAxis(self)

    def readJointLimits(self, limits):
        return _Physics.HingeJoint_readJointLimits(self, limits)

    def setJointLimits(self, minAngle, maxAngle):
        return _Physics.HingeJoint_setJointLimits(self, minAngle, maxAngle)

    def fixAngularConstraint(self, qRel):
        return _Physics.HingeJoint_fixAngularConstraint(self, qRel)

    def getRotAxisA(self):
        return _Physics.HingeJoint_getRotAxisA(self)

    def getJointType(self):
        return _Physics.HingeJoint_getJointType(self)
HingeJoint_swigregister = _Physics.HingeJoint_swigregister
HingeJoint_swigregister(HingeJoint)

class UniversalJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniversalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniversalJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_UniversalJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_UniversalJoint
    __del__ = lambda self: None

    def readAxes(self, axes):
        return _Physics.UniversalJoint_readAxes(self, axes)

    def setAxes(self, parentAxis, childAxis):
        return _Physics.UniversalJoint_setAxes(self, parentAxis, childAxis)

    def setParentAxis(self, parentAxis):
        return _Physics.UniversalJoint_setParentAxis(self, parentAxis)

    def getParentAxis(self):
        return _Physics.UniversalJoint_getParentAxis(self)

    def setChildAxis(self, childAxis):
        return _Physics.UniversalJoint_setChildAxis(self, childAxis)

    def getChildAxis(self):
        return _Physics.UniversalJoint_getChildAxis(self)

    def readJointLimits(self, limits):
        return _Physics.UniversalJoint_readJointLimits(self, limits)

    def setJointLimits(self, minAngleParent, maxAngleParent, minAngleChild, maxAngleChild):
        return _Physics.UniversalJoint_setJointLimits(self, minAngleParent, maxAngleParent, minAngleChild, maxAngleChild)

    def fixAngularConstraint(self, qRel):
        return _Physics.UniversalJoint_fixAngularConstraint(self, qRel)

    def getRotAxisA(self):
        return _Physics.UniversalJoint_getRotAxisA(self)

    def getRotAxisB(self):
        return _Physics.UniversalJoint_getRotAxisB(self)

    def getJointType(self):
        return _Physics.UniversalJoint_getJointType(self)
UniversalJoint_swigregister = _Physics.UniversalJoint_swigregister
UniversalJoint_swigregister(UniversalJoint)

class BallInSocketJoint(Joint):
    __swig_setmethods__ = {}
    for _s in [Joint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallInSocketJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallInSocketJoint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_BallInSocketJoint()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_BallInSocketJoint
    __del__ = lambda self: None

    def fixAngularConstraint(self, qRel):
        return _Physics.BallInSocketJoint_fixAngularConstraint(self, qRel)

    def readJointLimits(self, limits):
        return _Physics.BallInSocketJoint_readJointLimits(self, limits)

    def setJointLimits(self, minSwingAngle1, maxSwingAngle1, minSwingAngle2, maxSwingAngle2, minTwistAngle, maxTwistAngle):
        return _Physics.BallInSocketJoint_setJointLimits(self, minSwingAngle1, maxSwingAngle1, minSwingAngle2, maxSwingAngle2, minTwistAngle, maxTwistAngle)

    def readAxes(self, axes):
        return _Physics.BallInSocketJoint_readAxes(self, axes)

    def setAxes(self, *args):
        return _Physics.BallInSocketJoint_setAxes(self, *args)

    def setSwingAxis1(self, swingAxis1):
        return _Physics.BallInSocketJoint_setSwingAxis1(self, swingAxis1)

    def getSwingAxis1(self):
        return _Physics.BallInSocketJoint_getSwingAxis1(self)

    def setSwingAxis2(self, swingAxis2):
        return _Physics.BallInSocketJoint_setSwingAxis2(self, swingAxis2)

    def getSwingAxis2(self):
        return _Physics.BallInSocketJoint_getSwingAxis2(self)

    def setTwistAxis(self, twistAxis):
        return _Physics.BallInSocketJoint_setTwistAxis(self, twistAxis)

    def getTwistAxis(self):
        return _Physics.BallInSocketJoint_getTwistAxis(self)

    def getJointType(self):
        return _Physics.BallInSocketJoint_getJointType(self)
BallInSocketJoint_swigregister = _Physics.BallInSocketJoint_swigregister
BallInSocketJoint_swigregister(BallInSocketJoint)


_Physics.SHOW_MESH_swigconstant(_Physics)
SHOW_MESH = _Physics.SHOW_MESH

_Physics.SHOW_BODY_FRAME_swigconstant(_Physics)
SHOW_BODY_FRAME = _Physics.SHOW_BODY_FRAME

_Physics.SHOW_CD_PRIMITIVES_swigconstant(_Physics)
SHOW_CD_PRIMITIVES = _Physics.SHOW_CD_PRIMITIVES

_Physics.SHOW_MIN_BDG_SPHERE_swigconstant(_Physics)
SHOW_MIN_BDG_SPHERE = _Physics.SHOW_MIN_BDG_SPHERE

_Physics.SHOW_JOINTS_swigconstant(_Physics)
SHOW_JOINTS = _Physics.SHOW_JOINTS

_Physics.SHOW_COLOURS_swigconstant(_Physics)
SHOW_COLOURS = _Physics.SHOW_COLOURS

_Physics.SHOW_FRICTION_PARTICLES_swigconstant(_Physics)
SHOW_FRICTION_PARTICLES = _Physics.SHOW_FRICTION_PARTICLES

_Physics.SHOW_ABSTRACT_VIEW_swigconstant(_Physics)
SHOW_ABSTRACT_VIEW = _Physics.SHOW_ABSTRACT_VIEW

_Physics.SHOW_ABSTRACT_VIEW_SKELETON_swigconstant(_Physics)
SHOW_ABSTRACT_VIEW_SKELETON = _Physics.SHOW_ABSTRACT_VIEW_SKELETON
class RigidBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RigidBody, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_RigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_RigidBody
    __del__ = lambda self: None

    def typeName(self):
        return _Physics.RigidBody_typeName(self)

    def setExternalForce(self, ef):
        return _Physics.RigidBody_setExternalForce(self, ef)

    def setExternalTorque(self, et):
        return _Physics.RigidBody_setExternalTorque(self, et)

    def getExternalForce(self):
        return _Physics.RigidBody_getExternalForce(self)

    def getExternalTorque(self):
        return _Physics.RigidBody_getExternalTorque(self)

    def getLocalCoordinates(self, *args):
        return _Physics.RigidBody_getLocalCoordinates(self, *args)

    def getWorldCoordinates(self, *args):
        return _Physics.RigidBody_getWorldCoordinates(self, *args)

    def getAbsoluteVelocityForLocalPoint(self, localPoint):
        return _Physics.RigidBody_getAbsoluteVelocityForLocalPoint(self, localPoint)

    def getAbsoluteVelocityForGlobalPoint(self, globalPoint):
        return _Physics.RigidBody_getAbsoluteVelocityForGlobalPoint(self, globalPoint)

    def getCMPosition(self):
        return _Physics.RigidBody_getCMPosition(self)

    def setCMPosition(self, newCMPos):
        return _Physics.RigidBody_setCMPosition(self, newCMPos)

    def getCMVelocity(self):
        return _Physics.RigidBody_getCMVelocity(self)

    def setCMVelocity(self, newCMVel):
        return _Physics.RigidBody_setCMVelocity(self, newCMVel)

    def setAngularVelocity(self, newAVel):
        return _Physics.RigidBody_setAngularVelocity(self, newAVel)

    def getRestitutionCoefficient(self):
        return _Physics.RigidBody_getRestitutionCoefficient(self)

    def getFrictionCoefficient(self):
        return _Physics.RigidBody_getFrictionCoefficient(self)

    def draw(self, flags):
        return _Physics.RigidBody_draw(self, flags)

    def renderToObjFile(self, fp, vertexIdxOffset):
        return _Physics.RigidBody_renderToObjFile(self, fp, vertexIdxOffset)

    def loadFromFile(self, fp):
        return _Physics.RigidBody_loadFromFile(self, fp)

    def setName(self, name):
        return _Physics.RigidBody_setName(self, name)

    def getName(self):
        return _Physics.RigidBody_getName(self)

    def addMeshObj(self, *args):
        return _Physics.RigidBody_addMeshObj(self, *args)

    def setColour(self, r, g, b, a):
        return _Physics.RigidBody_setColour(self, r, g, b, a)

    def addMesh(self, mesh_disown):
        return _Physics.RigidBody_addMesh(self, mesh_disown)

    def getMeshCount(self):
        return _Physics.RigidBody_getMeshCount(self)

    def getMesh(self, index):
        return _Physics.RigidBody_getMesh(self, index)

    def getCDPCount(self):
        return _Physics.RigidBody_getCDPCount(self)

    def getCDP(self, index):
        return _Physics.RigidBody_getCDP(self, index)

    def setMass(self, mass):
        return _Physics.RigidBody_setMass(self, mass)

    def setMOI(self, moi):
        return _Physics.RigidBody_setMOI(self, moi)

    def getMOI(self):
        return _Physics.RigidBody_getMOI(self)

    def addCollisionDetectionPrimitive(self, cdp_disown):
        return _Physics.RigidBody_addCollisionDetectionPrimitive(self, cdp_disown)

    def getCollisionDetectionPrimitive(self, index):
        return _Physics.RigidBody_getCollisionDetectionPrimitive(self, index)

    def getCollisionDetectionPrimitiveCount(self):
        return _Physics.RigidBody_getCollisionDetectionPrimitiveCount(self)

    def lockBody(self, isLocked=True):
        return _Physics.RigidBody_lockBody(self, isLocked)

    def setFrictionCoefficient(self, frictionCoefficient):
        return _Physics.RigidBody_setFrictionCoefficient(self, frictionCoefficient)

    def setRestitutionCoefficient(self, restitutionCoefficient):
        return _Physics.RigidBody_setRestitutionCoefficient(self, restitutionCoefficient)

    def getGroundSoftness(self):
        return _Physics.RigidBody_getGroundSoftness(self)

    def getGroundPenalty(self):
        return _Physics.RigidBody_getGroundPenalty(self)

    def setODEGroundCoefficients(self, softness, penalty):
        return _Physics.RigidBody_setODEGroundCoefficients(self, softness, penalty)

    def getODEGroundSoftness(self):
        return _Physics.RigidBody_getODEGroundSoftness(self)

    def getODEGroundPenalty(self):
        return _Physics.RigidBody_getODEGroundPenalty(self)

    def setPlanar(self, planar):
        return _Physics.RigidBody_setPlanar(self, planar)

    def isPlanar(self):
        return _Physics.RigidBody_isPlanar(self)

    def getMass(self):
        return _Physics.RigidBody_getMass(self)

    def setBodyID(self, newID):
        return _Physics.RigidBody_setBodyID(self, newID)

    def getPMI(self):
        return _Physics.RigidBody_getPMI(self)

    def getOrientation(self):
        return _Physics.RigidBody_getOrientation(self)

    def setOrientation(self, *args):
        return _Physics.RigidBody_setOrientation(self, *args)

    def getAngularVelocity(self):
        return _Physics.RigidBody_getAngularVelocity(self)

    def isLocked(self):
        return _Physics.RigidBody_isLocked(self)

    def isArticulated(self):
        return _Physics.RigidBody_isArticulated(self)

    def updateWorldCDPs(self):
        return _Physics.RigidBody_updateWorldCDPs(self)

    def getAFParent(self):
        return _Physics.RigidBody_getAFParent(self)
RigidBody_swigregister = _Physics.RigidBody_swigregister
RigidBody_swigregister(RigidBody)

class ArticulatedRigidBody(RigidBody):
    __swig_setmethods__ = {}
    for _s in [RigidBody]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArticulatedRigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidBody]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArticulatedRigidBody, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_ArticulatedRigidBody()
        try:
            self.this.append(this)
        except:
            self.this = this

    def draw(self, flags):
        return _Physics.ArticulatedRigidBody_draw(self, flags)
    __swig_destroy__ = _Physics.delete_ArticulatedRigidBody
    __del__ = lambda self: None

    def getParentJoint(self):
        return _Physics.ArticulatedRigidBody_getParentJoint(self)

    def getChildJointCount(self):
        return _Physics.ArticulatedRigidBody_getChildJointCount(self)

    def getChildJoint(self, i):
        return _Physics.ArticulatedRigidBody_getChildJoint(self, i)

    def isArticulated(self):
        return _Physics.ArticulatedRigidBody_isArticulated(self)

    def setAFParent(self, parent):
        return _Physics.ArticulatedRigidBody_setAFParent(self, parent)

    def getAFParent(self):
        return _Physics.ArticulatedRigidBody_getAFParent(self)
ArticulatedRigidBody_swigregister = _Physics.ArticulatedRigidBody_swigregister
ArticulatedRigidBody_swigregister(ArticulatedRigidBody)

class ArticulatedFigure(Utils.Observable):
    __swig_setmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArticulatedFigure, name, value)
    __swig_getmethods__ = {}
    for _s in [Utils.Observable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArticulatedFigure, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Physics.new_ArticulatedFigure()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _Physics.delete_ArticulatedFigure
    __del__ = lambda self: None

    def loadIntoWorld(self):
        return _Physics.ArticulatedFigure_loadIntoWorld(self)

    def setRoot(self, articulatedRigidBody_disown):
        return _Physics.ArticulatedFigure_setRoot(self, articulatedRigidBody_disown)

    def getRoot(self):
        return _Physics.ArticulatedFigure_getRoot(self)

    def addArticulatedRigidBody(self, articulatedRigidBody_disown):
        return _Physics.ArticulatedFigure_addArticulatedRigidBody(self, articulatedRigidBody_disown)

    def getArticulatedRigidBody(self, i):
        return _Physics.ArticulatedFigure_getArticulatedRigidBody(self, i)

    def getArticulatedRigidBodyCount(self):
        return _Physics.ArticulatedFigure_getArticulatedRigidBodyCount(self)

    def setName(self, name):
        return _Physics.ArticulatedFigure_setName(self, name)

    def getName(self):
        return _Physics.ArticulatedFigure_getName(self)

    def getARBByName(self, name):
        return _Physics.ArticulatedFigure_getARBByName(self, name)

    def addJoint(self, joint_disown):
        return _Physics.ArticulatedFigure_addJoint(self, joint_disown)

    def fixJointConstraints(self, fixOrientations=True, fixVelocities=False):
        return _Physics.ArticulatedFigure_fixJointConstraints(self, fixOrientations, fixVelocities)

    def addJointsToList(self, joints):
        return _Physics.ArticulatedFigure_addJointsToList(self, joints)

    def computeMass(self):
        return _Physics.ArticulatedFigure_computeMass(self)

    def getMass(self):
        return _Physics.ArticulatedFigure_getMass(self)

    def loadFromFile(self, fp, world):
        return _Physics.ArticulatedFigure_loadFromFile(self, fp, world)

    def getJoint(self, i):
        return _Physics.ArticulatedFigure_getJoint(self, i)

    def getJointCount(self):
        return _Physics.ArticulatedFigure_getJointCount(self)

    def getJointByName(self, jName):
        return _Physics.ArticulatedFigure_getJointByName(self, jName)

    def getJointIndex(self, *args):
        return _Physics.ArticulatedFigure_getJointIndex(self, *args)
ArticulatedFigure_swigregister = _Physics.ArticulatedFigure_swigregister
ArticulatedFigure_swigregister(ArticulatedFigure)

class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _Physics.World_instance
    if _newclass:
        instance = staticmethod(_Physics.World_instance)

    def destroyAllObjects(self):
        return _Physics.World_destroyAllObjects(self)

    def drawRBs(self, flags=0x0001):
        return _Physics.World_drawRBs(self, flags)

    def renderRBsToObjFile(self, fp, vertexIdxOffset):
        return _Physics.World_renderRBsToObjFile(self, fp, vertexIdxOffset)

    def getContactForces(self):
        return _Physics.World_getContactForces(self)

    def advanceInTime(self, deltaT):
        return _Physics.World_advanceInTime(self, deltaT)

    def loadRBsFromFile(self, fName):
        return _Physics.World_loadRBsFromFile(self, fName)

    def addRigidBody(self, rigidBody_disown):
        return _Physics.World_addRigidBody(self, rigidBody_disown)

    def addArticulatedFigure(self, articulatedFigure_disown):
        return _Physics.World_addArticulatedFigure(self, articulatedFigure_disown)

    def getARBByName(self, *args):
        return _Physics.World_getARBByName(self, *args)

    def getRBByName(self, name):
        return _Physics.World_getRBByName(self, name)

    def getState(self, state):
        return _Physics.World_getState(self, state)

    def setState(self, state, start=0):
        return _Physics.World_setState(self, state, start)

    def getAFCount(self):
        return _Physics.World_getAFCount(self)

    def getAF(self, i):
        return _Physics.World_getAF(self, i)

    def applyRelForceTo(self, b, f, p):
        return _Physics.World_applyRelForceTo(self, b, f, p)

    def applyForceTo(self, b, f, p):
        return _Physics.World_applyForceTo(self, b, f, p)

    def applyTorqueTo(self, b, t):
        return _Physics.World_applyTorqueTo(self, b, t)

    def testAdvanceInTime(self, deltaT):
        return _Physics.World_testAdvanceInTime(self, deltaT)

    def runTest(self):
        return _Physics.World_runTest(self)
World_swigregister = _Physics.World_swigregister
World_swigregister(World)

def World_instance():
    return _Physics.World_instance()
World_instance = _Physics.World_instance


def world():
	return World_instance();


def castToCollisionDetectionPrimitive(obj):
    return _Physics.castToCollisionDetectionPrimitive(obj)
castToCollisionDetectionPrimitive = _Physics.castToCollisionDetectionPrimitive

def castToBoxCDP(obj):
    return _Physics.castToBoxCDP(obj)
castToBoxCDP = _Physics.castToBoxCDP

def castToSphereCDP(obj):
    return _Physics.castToSphereCDP(obj)
castToSphereCDP = _Physics.castToSphereCDP

def castToPlaneCDP(obj):
    return _Physics.castToPlaneCDP(obj)
castToPlaneCDP = _Physics.castToPlaneCDP

def castToCapsuleCDP(obj):
    return _Physics.castToCapsuleCDP(obj)
castToCapsuleCDP = _Physics.castToCapsuleCDP

def castToJoint(obj):
    return _Physics.castToJoint(obj)
castToJoint = _Physics.castToJoint

def castToStiffJoint(obj):
    return _Physics.castToStiffJoint(obj)
castToStiffJoint = _Physics.castToStiffJoint

def castToHingeJoint(obj):
    return _Physics.castToHingeJoint(obj)
castToHingeJoint = _Physics.castToHingeJoint

def castToUniversalJoint(obj):
    return _Physics.castToUniversalJoint(obj)
castToUniversalJoint = _Physics.castToUniversalJoint

def castToBallInSocketJoint(obj):
    return _Physics.castToBallInSocketJoint(obj)
castToBallInSocketJoint = _Physics.castToBallInSocketJoint

def castToRigidBody(obj):
    return _Physics.castToRigidBody(obj)
castToRigidBody = _Physics.castToRigidBody

def castToArticulatedRigidBody(obj):
    return _Physics.castToArticulatedRigidBody(obj)
castToArticulatedRigidBody = _Physics.castToArticulatedRigidBody

def castToArticulatedFigure(obj):
    return _Physics.castToArticulatedFigure(obj)
castToArticulatedFigure = _Physics.castToArticulatedFigure
# This file is compatible with both classic and new-style classes.


